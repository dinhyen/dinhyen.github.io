<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technology | Yen's Blog]]></title>
  <link href="http://dinhyen.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://dinhyen.github.io/"/>
  <updated>2014-11-12T23:52:33-05:00</updated>
  <id>http://dinhyen.github.io/</id>
  <author>
    <name><![CDATA[Yen Tran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular in Jekyll/Octopress]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/18/angular-in-jekyll-or-octopress/"/>
    <updated>2014-04-18T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/18/angular-in-jekyll-or-octopress</id>
    <content type="html"><![CDATA[<p>Have a problem with Angular scope variable binding not working on a Jekyll or Octopress (which uses Jekyll) page?  It so happens that Jekyll&rsquo;s Liquid Template uses the same  syntax as Angular and would attempt to process the markup before Angular can get to it.  To get around the problem, you can surround Angular markup with <code>&#123;% raw %&#125;</code> and <code>&#123;% endraw %&#125;</code> tags.  Alternatively, you can also forgo from using this syntax altogether and use Angular&rsquo;s <code>ng-bind</code> directive to bind a variable to a DOM element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copying files in Hudson]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/15/copying-files-in-hudson/"/>
    <updated>2014-04-15T20:05:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/15/copying-files-in-hudson</id>
    <content type="html"><![CDATA[<p>Copying files somewhere is pretty standard procedure when deploying an app.  Interestingly I&rsquo;ve never had to copy files directly in Hudson.  Until now I&rsquo;ve only deployed .NET apps in Hudson and used MSBuild&rsquo;s Copy task to copy the files to a share folder.  Now that I want to deploy Angular and other client apps in Hudson, I&rsquo;d have to copy the files manually.</p>

<p>My initial attempt was to add a new Execute Shell build step to run <code>xcopy</code>.  Since Hudson executes the command through the Bourne shell, which interprets any backslash in the path as the escape character, I&rsquo;d have to escape the backslash itself.  Why Windows has to be different from everyone else is a major source of annoyance if you have to move back and forth between Windows and *nix.
<code>
xcopy c:\\source\\app\\* \\\\server\\share\\app
</code>
This worked, but in order for xcopy to copy subdirectories, refrain from prompting everytime it needs to overwrite a file and take other actions necessary for unsupervised execution, I needed to specify additional parameters.
<code>
xcopy c:\\source\\app\\* \\\\server\\share /c /k /e /r /y /exclude:c:\\source\\xcopy_exclude.txt
</code>
Unfortunately this was when xcopy blows up with the &ldquo;invalid number of parameters&rdquo; error.  It probably had to do with the shell not passing the parameters to xcopy.  No dice if I put the command in a batch file then executing it.  Ditto when I tried <code>robocopy</code>, which prints a nicer error message but is functionally the same as xcopy.  As a note, you could test all of this in a Bourne shell rather than invoking Hudson every time.</p>

<p>It occurred to me to use something that&rsquo;s native to the shell, rather than trying to get it to play nice with xcopy.  You&rsquo;d still have to deal with the backslash in the share:
<code>
cp -r /c/source/app/* \\\\server\\share
</code></p>

<p>This worked!  Also for things like &ldquo;rm -rf&rdquo;.  We&rsquo;re done, right?  Well, this mixmatching of different command-line styles seems unwieldy.  After I experimented further, it turned out that I had made an error from the start.  In addition to the Execute Shell build step, there&rsquo;s another type called Execute Windows Batch Command.  This build step allows you to run commands in a Windows shell.  Thus you can run execute xcopy, or anything else, as you would in the command prompt without needing to escape backslash.</p>

<p>I&rsquo;d also like to be able to specify the share folder at run time so the project can be deployed to different servers.  In my initial attempt, I created a drop-down list parameter for the server name.  Then I figured to use the following xcopy command which incorporates the SERVER parameter.
<code>
xcopy c:\source\app\* \\%SERVER%\app
</code>
The %SERVER% syntax is used to reference an environment variable in Windows.  This approach turned out to be an abject failure.  It turned out that entire share has to be specified as an environment variable; e.g., %SHARE% should point to \server\app.  Then I could issue commands such as:
<code>
del /s /q %SHARE%\*
xcopy c:\source\app\* %SHARE%
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A MoCA home network]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/09/moca-home-network/"/>
    <updated>2014-04-09T13:27:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/09/moca-home-network</id>
    <content type="html"><![CDATA[<p>The benefits of a wired home network are many.  I use the <a href="http://www.silicondust.com/products/hdhomerun/prime">SiliconDust HDHomerun Prime</a> network TV tuners to watch cable TV on any computer in the house without the need for a set-top box.  However, it is quite bandwidth-intensive and even a wireless-N connection just doesn&rsquo;t cut it.  The picture would be plagued with stutters, pause and artifacts and pretty much unwatchable, especially for hockey with its lightning-fast actions.</p>

<p>For wired connectivity without an existing Ethernet network there are three options.  The best option from both cost and performance standpoints is available if the house is wired for a land line with Cat-5/5e/6 wiring, which is invariably the case with a modern construction.  In this case you can just repurpose the existing wiring and swap out the RJ11 telephone jacks for RJ45 Ethernet jacks.  This requires a bit of manual labor but the results are beautiful and satisfying.  I did this for a previous residence and it worked wonderfully. Unfortunately in my current house the wiring leaves something to be desired.  The phones lines are not wired point-to-point but daisy-chained together; this rules out an Ethernet network.</p>

<p>The second option is to use the power lines themselves, which hopefully every house comes equipped with. I used a pair of TP-Link AV500 Nano power line adapters.  Installation couldn&rsquo;t be any easier&mdash;plug them into the power sockets and they just work. The LAN connection is automatically detected in Windows and OS X.  My tests showed that the connection was able to achieve the the full bandwidth that I am supposed to get. My TV feed no longer stuttered or became corrupted. Unfortunately this solution isn&rsquo;t perfect either.  Under heavy load the adapters had a nasty habit of tripping the circuit breakers.  I couldn&rsquo;t even run the network speed test while Windows Media Center was playing without bringing the power down.  Since the powerline adapters don&rsquo;t play nice with surge protectors I don&rsquo;t really have a way to prevent it from happening.</p>

<p>This leaves the last option, a home network over the coaxial cabling, which like most American household we have plenty of. Each room has one coaxial outlet, or even two. The industry standard for a home network over coaxial cabling is the Multimedia over Coaxial Alliance (MoCA) standard.  It seems to be a relatively young technology as there aren&rsquo;t many products for it. Interestingly this is something I&rsquo;m already using as a Verizon FiOS subscriber.  Verizon uses MoCA for the Optical Network Terminal (ONT) which converts the optical fiber signal to electric signal. To use the coaxial cabling to carry Ethernet network traffic requires a MoCA network adapter or bridge, which converts between the different signal formats. I have the standard <a href="http://www.actiontec.com/189.html">Actiontec MI424WR router</a>, which has a built-in MoCA adapter.   It would act as one endpoint.  For each additional endpoint, I would need a separate MoCA network adapter. There are only a handful of MoCA network adapters, the most popular of which the <a href="http://www.actiontec.com/251.html">Actiontec ECB2500C</a>.</p>

<p>I wasn&rsquo;t sure about the best way to set up the MoCA network.  The MI424WR router can connect to the ONT via a coaxial or Cat-5 cable. In my case the MoCA WAN comes into the router via the coaxial connection. However, since the router has only one coaxial terminal, I wasn&rsquo;t sure whether I could connect to the MoCA LAN using the same coaxial terminal. I thought that since the router is connected to the MoCA WAN coaxially, I would need an additional MoCA adapter for each outgoing connection from the router to the MoCA LAN.  This possible setup is shown in the below figure.  I would need 4 MoCA adapters to extend connectivity to 2 rooms.</p>

<p><img src="http://yentran.isamonkey.org/gallery/moca-home-network/moca-bad.png" alt="" /></p>

<p>Fortunately, this scenario isn&rsquo;t necessary.  It turns out that the router can connect to both MoCA WAN and MoCA LAN through the same coaxial connection. This is because the respective networks operate over different frequency bands and do not interfere with each other. I would only need a MoCA adapter at each receiving end.  Since I can use the router as a MoCA adapter in one room, I&rsquo;d only need one additional MoCA adapter.</p>

<p><img src="http://yentran.isamonkey.org/gallery/moca-home-network/moca-good.png" alt="" /></p>

<p>If you need more than one Ethernet port, Adaptec also makes a 4-port Home Theater Coaxial Network Adapter (ECB3500T01), which is only marginally more expensive than a 1-port adapter.  It would be a more compact solution than using an Ethernet switch with the 1-port adapter.</p>

<p>Of note, the cable splitter must be MoCA-compatible. Since MoCA operates in the 0.5-1.65 GHz frequence band, the splitter should be rated for at least this range. Fortunately there are many inexpensive options.</p>

<p>Update (Oct 9, 2014): It turns out that Verizon sells a Verizon-branded <a href="https://teleproducts.verizon.com/fileshare/plm/brochure/ATWECB3000N_brochure.pdf">Fios wireless network extender</a> for $75 which comes with 2 Gigabit Ethernet ports as well as Wireless-N and MoCA connectivity, ostensibly to extend a home network to hard-to-reach places.  In retrospect the Wireless-N Wi-Fi extender would have made it a better purchase than the 4-port Home Theater Coaxial Network Adapter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple tasks with Grunt]]></title>
    <link href="http://dinhyen.github.io/blog/2014/03/03/simple-tasks-with-grunt/"/>
    <updated>2014-03-03T15:16:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/03/03/simple-tasks-with-grunt</id>
    <content type="html"><![CDATA[<p>Developers are lazy by nature and always look for ways to avoid having to perform repetitive tasks. There are plenty of options when you&rsquo;re working with conventional server-side platforms.  Unfortunately, when it comes to JavaScripts and CSS, automation tools are harder to find. That is, until Grunt comes along (following Node, which turned upside down the whole idea of server vs client side in the first place).</p>

<p>As a self-described &ldquo;task runner&rdquo;, Grunt is powerful and pleasantly approachable.  Its succinctness makes it a joy to use.  This carries over into the Grunt documentation, which is really excellent.  Inspired by the <a href="http://gruntjs.com/sample-gruntfile">Sample Gruntfile tutorial</a>, I&rsquo;d like to walk through my own <code>Gruntfile</code> created for a <a href="https://github.com/dinhyen/darkbox">small JavaScript library</a>.  The goal is to automate a typical process of building the app, from generating CSS from Sass, aggregating various source files into a single file, and minifying the result.</p>

<p>Once you <a href="http://gruntjs.com/installing-grunt">have Grunt installed</a> using the Node Package Manager, you will need a <code>package.json</code> file, just as for other Node utilities.  The quickest way to create a <code>package.json</code> file is to simply run <code>npm init</code> which generates the file after a series of questions.</p>

<p>The following libraries will be used:</p>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-compass">grunt-contrib-compass</a>: generates CSS from Sass</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a>: combines various files into a single file</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-cssmin">grunt-contrib-cssmin</a>: minifies CSS</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-jshint">grunt-contrib-jshint</a>: combs through JavaScript and flags errors or usage issues</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>: mangles and minifies JavaScript</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a>: performs tasks whenever a file changes</li>
</ul>


<p>The recommended approach, as stated at the beginning of the documentation for each plugin, is to run <code>npm install grunt-contrib-xxx --save-dev</code>, which has the dual benefit of installing the plugin and also adding a reference to it in <code>package.json</code>.</p>

<p>Besides <code>package.json</code>, the only other file you need is <code>Gruntfile</code>, in which you define and configure the tasks to run. Configuration options are specified as the argument to <code>grunt.initConfig</code>.</p>

<p>The first line reads in <code>package.json</code> and turns it into an object.  In this case, I&rsquo;m interested in product name, but it can provide <a href="http://package.json.nodejitsu.com">many other useful properties</a>.</p>

<p><code>javascript
pkg: grunt.file.readJSON('package.json'),
</code></p>

<p>All <code>Gruntfile</code> tasks share the <a href="http://gruntjs.com/configuring-tasks">same basic syntax</a> for specifying options, input and output.  Each task&rsquo;s configuration block is named after the plugin; for example, the configuration block for the <code>grunt-contrib-uglify</code> is simply <code>uglify</code>.  Each task can have arbitrary targets.  You&rsquo;ll probably see a &ldquo;test&rdquo; target for testing or a &ldquo;dist&rdquo; target for building a distribution.  Since I want to build CSS and JavaScript, here I have 2 targets, &ldquo;scripts&rdquo; and &ldquo;stylesheets&rdquo;.  When there are multiple targets in a task, each target can be executed directly.  For example, <code>grunt concat:scripts</code> runs just the &ldquo;scripts&rdquo; target.  If you don&rsquo;t provide a target, then all targets would be run in order.</p>

<p>The Compass task generates CSS from Sass source.  Of course, Compass <a href="http://compass-style.org/install">must be installed</a> first.  The following options simply instruct Compass to process Sass files in the directory &ldquo;sass&rdquo; and generate the corresponding CSS files in the directory &ldquo;css&rdquo;.
``` javascript
compass: {
  stylesheets: {</p>

<pre><code>options: {
  sassDir: 'sass',
  cssDir: 'css'
}
</code></pre>

<p>  }
}
```</p>

<p>When developing, it would be nice to be able to preview changes made to the Sass source.  This is where the watch plugin comes in.  In the simplest use case it simply detects that one or more files have been changed and then runs certain tasks.  The following options allow me to re-generate CSS each time a Sass file is modified.  Start watching by typing <code>grunt watch</code> at the command prompt.</p>

<p>``` javascript
watch: {
  stylesheets: {</p>

<pre><code>files: '**/*.scss',
tasks: ['compass']
</code></pre>

<p>  }
}
```</p>

<p>Typically JavaScript and CSS source is distributed over multiple files.  In production you&rsquo;d want to combine the various source files into a single file for performance reason.  This can be done with the concat plugin.  For the source, I&rsquo;m using a globbing pattern for simplicity; <code>src/**/*.js</code> means all <code>.js</code> files in the <code>src</code> directory and any of its sub-directories.  The files would be combined in alphabetical order. An alternative would be to specify an array of individual files.  While this lets you control the ordering of files, it becomes unwieldy for a large number of files. Of course, there are <a href="http://gruntjs.com/configuring-tasks#globbing-patterns">many ways</a> to skin the cat.  For the output, I&rsquo;m using the project&rsquo;s name which comes from <code>package.json</code>.</p>

<p>``` javascript
concat: {
  scripts: {</p>

<pre><code>options: {
  separator: ';'
},
src: 'src/**/*.js',
dest: 'dist/&lt;%= pkg.name %&gt;.js'
</code></pre>

<p>  },
  stylesheets: {</p>

<pre><code>src: 'css/**/*.css',
dest: 'dist/&lt;%= pkg.name %&gt;.css'
</code></pre>

<p>  }
}
```</p>

<p>The cssmin plugin provides CSS minification.  The source should be the output of the concat stage.  Note the variable substitution syntax.</p>

<p>``` javascript
cssmin: {
  stylesheets: {</p>

<pre><code>src: '&lt;%= concat.stylesheets.dest %&gt;',
dest: 'dist/&lt;%= pkg.name %&gt;.min.css'
</code></pre>

<p>  }
}
```</p>

<p>The uglify plugin is the JavaScript equivalent of cssmin.  It also mangles variable names which reduces file size further at the expense of readability.  Since mangling pretty much makes your JavaScript indecipherable and impossible to debug, you can also provide a <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">source map</a> which lets you view the original, non-uglified source when debugging.  The uglify plugin have all these and sundry options.  Here it also inserts a comment with some basic information at the top of the file.</p>

<p>``` javascript
uglify: {
  options: {</p>

<pre><code>banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n',
sourceMap: true
</code></pre>

<p>  },
  scripts: {</p>

<pre><code>src: '&lt;%= concat.scripts.dest %&gt;',
dest: 'dist/&lt;%= pkg.name %&gt;.min.js'
</code></pre>

<p>  }
}
```</p>

<p>The jshint configuration block just sets some <a href="http://www.jshint.com/docs/options">options for jshint</a>.
``` javascript
jshint: {
  options: {</p>

<pre><code>curly: true,
eqeqeq: true,
immed: true,
latedef: true,
newcap: true,
noarg: true,
sub: true,
undef: true,
unused: true,
boss: true,
eqnull: true,
node: true
</code></pre>

<p>  }
```</p>

<p>Finally register a default task and a useful task.  Tasks would be executed in the order specified.
<code>javascript
grunt.registerTask('default', ['jshint', 'compass', 'concat', 'cssmin', 'uglify']);
grunt.registerTask('sassify', ['compass']);
</code></p>

<p>To run a task, simply specify the task&rsquo;s name as a argument to <code>grunt</code> on the command line; e.g., <code>grunt jshint</code>.  Simply typing <code>grunt</code> runs the default task.  Below is the output for running the default task; even for this small set of tasks, running them manually or maintaining a script without Grunt would have been a tedious chore.</p>

<p>```
Running &ldquo;jshint:scripts&rdquo; (jshint) task</p>

<blockquote><blockquote><p>2 files lint free.</p></blockquote></blockquote>

<p>Running &ldquo;compass:stylesheets&rdquo; (compass) task
unchanged sass/darkbox.scss
unchanged sass/mixins.scss
unchanged sass/screen.scss
Compilation took 0.012s</p>

<p>Running &ldquo;concat:scripts&rdquo; (concat) task
File dist/darkbox.js created.</p>

<p>Running &ldquo;concat:stylesheets&rdquo; (concat) task
File dist/darkbox.css created.</p>

<p>Running &ldquo;cssmin:stylesheets&rdquo; (cssmin) task
File dist/darkbox.min.css created: 3.9 kB → 2.78 kB</p>

<p>Running &ldquo;uglify:scripts&rdquo; (uglify) task
File dist/darkbox.min.map created (source map).
File dist/darkbox.min.js created: 5.45 kB → 2.51 kB</p>

<p>Done, without errors.
```</p>

<p>Below is the entire <code>Gruntfile</code>.  Happy grunting.</p>

<p>``` javascript
module.exports = function (grunt) {</p>

<p>  grunt.initConfig({</p>

<pre><code>pkg: grunt.file.readJSON('package.json'),
compass: {
  stylesheets: {
    options: {
      sassDir: 'sass',
      cssDir: 'css'
    }
  }
},
concat: {
  scripts: {
    options: {
      separator: ';'
    },
    src: 'src/**/*.js',
    dest: 'dist/&lt;%= pkg.name %&gt;.js'
  },
  stylesheets: {
    src: 'css/**/*.css',
    dest: 'dist/&lt;%= pkg.name %&gt;.css'
  }
},
cssmin: {
  stylesheets: {
    src: '&lt;%= concat.stylesheets.dest %&gt;',
    dest: 'dist/&lt;%= pkg.name %&gt;.min.css'
  }
},
jshint: {
  options: {
    curly: true,
    eqeqeq: true,
    immed: true,
    latedef: true,
    newcap: true,
    noarg: true,
    sub: true,
    undef: true,
    unused: true,
    boss: true,
    eqnull: true,
    node: true
  },
  scripts: {
    src: ['Gruntfile.js', 'src/*.js']
  }
},
uglify: {
  options: {
    banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n',
    sourceMap: true
  },
  scripts: {
    src: '&lt;%= concat.scripts.dest %&gt;',
    dest: 'dist/&lt;%= pkg.name %&gt;.min.js'
  }
},
watch: {
  stylesheets: {
    files: '**/*.scss',
    tasks: ['compass']
  }
}
</code></pre>

<p>  });</p>

<p>  grunt.loadNpmTasks(&lsquo;grunt-contrib-compass&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-concat&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-cssmin&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-jshint&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-uglify&rsquo;);
  grunt.loadNpmTasks(&lsquo;grunt-contrib-watch&rsquo;);</p>

<p>  grunt.registerTask(&lsquo;default&rsquo;, [&lsquo;jshint&rsquo;, &lsquo;compass&rsquo;, &lsquo;concat&rsquo;, &lsquo;cssmin&rsquo;, &lsquo;uglify&rsquo;]);
  grunt.registerTask(&lsquo;sassify&rsquo;, [&lsquo;compass&rsquo;]);
};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Git cheat sheet]]></title>
    <link href="http://dinhyen.github.io/blog/2014/02/07/my-git-cheat-sheet/"/>
    <updated>2014-02-07T16:02:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/02/07/my-git-cheat-sheet</id>
    <content type="html"><![CDATA[<p>There are lots of great Git guides out there.  This is intended simply to be a reference for me during those dark times when I can&rsquo;t remember the syntax for creating a tracking branch.</p>

<h3>Config</h3>

<p>```</p>

<h1>These will show up in git log</h1>

<p>git config &mdash;global user.name &ldquo;Yen Tran&rdquo;
git config &mdash;global user.email <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#121;&#101;&#x6e;&#x40;&#121;&#101;&#x6e;&#116;&#x72;&#x61;&#110;&#46;&#x6f;&#x72;&#103;">&#x79;&#x65;&#x6e;&#x40;&#x79;&#x65;&#110;&#x74;&#114;&#x61;&#110;&#46;&#111;&#x72;&#103;</a>
git config &mdash;list
```</p>

<h3>Info</h3>

<p>```
gitk
git status
git log
git log origin/master</p>

<h1>Show endpoints such as origin</h1>

<p>git remote show</p>

<h1>Show origin params</h1>

<p>git remote show origin
```</p>

<h3>Branch (Local)</h3>

<p>```
git branch <branch> &lt;sha1_of_commit></p>

<h1>Ex: git branch foo 7e2785d</h1>

<p>```</p>

<p>```</p>

<h1>Delete branch</h1>

<p>git branch -d <branch></p>

<h1>Create branch:</h1>

<p>git branch <branch>
git checkout <branch></p>

<h1>Check out and automatically creates branch</h1>

<p>git checkout -b <branch></p>

<h1>List local branches</h1>

<p>git br</p>

<h1>List remote branches</h1>

<p>git branch -r</p>

<h1>List all branches</h1>

<p>git branch -a</p>

<h1>Verbose list of local branches and HEAD commit</h1>

<p>git branch -v
```</p>

<h3>Check out a previous check-in</h3>

<p>```
git log</p>

<h1>Locate desired checkin and copy SHA; e.g., f2bc540fc6817b0409571f6e5a562dffa6396017</h1>

<p>git checkout <SHA></p>

<h1>Do stuff, publish, etc.</h1>

<p>git checkout master
```</p>

<h3>Cherry-pick</h3>

<p>```</p>

<h1>Source branch</h1>

<p>git co 2012-01-01-A</p>

<h1>Get top log entry</h1>

<p>git log -1</p>

<h1>Copy first few characters of SHA hash</h1>

<h1>Destination branch</h1>

<p>git co master
git cherry-pick 96f39d92de93</p>

<h1>Review changes</h1>

<p>git diff HEAD~1
```</p>

<h3>Clone</h3>

<p>```</p>

<h1>SSH keys under ~/.ssh</h1>

<p>git clone git@donny:repo.git</p>

<h1>Directory is optional; automatically created if not specified</h1>

<p>git clone gitolite@donny:repo.git [directory]
```</p>

<h3>Commit</h3>

<p>```</p>

<h1>Also automatically stage and commit</h1>

<p>git commit -a -m &ldquo;commit message here&rdquo;</p>

<h1>Add to previous commit or Rename a commit message</h1>

<p>git commit &mdash;amend</p>

<h1>Select reword for the desired commit in the interactive editor</h1>

<h1>Edit the message</h1>

<h1>Save</h1>

<p>git rebase -i master
```</p>

<h3>Create new repo</h3>

<p>```
git init</p>

<h1>So that subsequent add can ignore files</h1>

<p>git add .gitignore
git remote add origin git@donny:repo.git
git remote add origin git@github.com:user/repo.git</p>

<h1>add and commit files (-u option updates local)</h1>

<p>git push -u origin master
```</p>

<h3>Diff</h3>

<p>```</p>

<h1>Graphical version</h1>

<p>git difftool
git diff <directory>
git difftool HEAD~1</p>

<h1>Diff files that have been staged</h1>

<p>git diff &mdash;cached</p>

<h1>Diff local changes against repository</h1>

<p>git diff origin/master
```</p>

<h3>Help</h3>

<p>```
man git-log
man git-show</p>

<h1>etc.</h1>

<p>```</p>

<h3>Log</h3>

<p>```</p>

<h1>Get top 1 log entry</h1>

<p>git log -1</p>

<h1>Show history beyond renames</h1>

<p>git log &mdash;follow file</p>

<h1>Include diffs</h1>

<p>git log -p file
```</p>

<h3>Stage</h3>

<p>```
git add <file>&hellip;
git add .</p>

<h1>Opposite of add; use when files are renamed, etc.</h1>

<p>git rm <file>&hellip;
```</p>

<h3>Stash</h3>

<p>```
git stash
git stash list</p>

<h1>Show changes in stash, where 0 is the number of the stashed item as shown by git stash list</h1>

<p>git show @{0}</p>

<h1>Drop specified stash where xx is number shown in stash list</h1>

<p>git stash drop stash@{xx}
```</p>

<h3>Drop local changes</h3>

<p>```</p>

<h1>Change state of working copy to match repository, if file has not been added to index/staging</h1>

<p>git checkout &mdash; <filename></p>

<h1>Ditto, but if file has been added to index</h1>

<p>git reset <filename>
git stash save &mdash;keep-index
```</p>

<h3>Pull</h3>

<p><code>
git pull origin master
git checkout master
</code></p>

<h3>Rebase: resolve conflict</h3>

<p>```
git checkout <branch>
git rebase master
git status
git add <file></p>

<h1>Fix conflicts</h1>

<p>git rebase &mdash;continue
```</p>

<h3>Rebase: interactive</h3>

<p>```
git rebase -i origin/master
git rebase -i</p>

<h1>In the text editor, select s or squash on the bottom-most commits to squash them</h1>

<p>```</p>

<h3>Refs</h3>

<p>You may get this error when running &ldquo;git branch -d foo&rdquo;:
warning: deleting branch &lsquo;foo&rsquo; that has been merged to &lsquo;refs/remotes/origin/foo&rsquo;, but not yet merged to HEAD.
Deleted branch foo (was 334730a).
From <a href="http://stackoverflow.com/questions/18506456/git-how-to-delete-a-local-ref-branch:">http://stackoverflow.com/questions/18506456/git-how-to-delete-a-local-ref-branch:</a>
```</p>

<h1>Remove local ref</h1>

<p>git update-ref -d refs/remotes/origins/foo
```</p>

<h3>Ref log</h3>

<p><code>
git reflog
</code></p>

<h3>Remote</h3>

<p>```</p>

<h1>Remove origin</h1>

<p>git remote rm origin
git remote add origin git@server:repo.git
git remote show origin
```</p>

<p>```</p>

<h1>Change origin URL</h1>

<p>git remote set-url origin git@server:repo.git
```</p>

<h3>Remote Branch</h3>

<p>```</p>

<h1>Create branch. Reference: <a href="http://git-scm.com/book/en/Git-Branching-Remote-Branches">http://git-scm.com/book/en/Git-Branching-Remote-Branches</a></h1>

<p>git branch <branch></p>

<h1>Show local branches configured for push/pull, i.e. tracking branches</h1>

<p>git remote show origin
git push <remote> <branch></p>

<h1>Ex: git push origin foo</h1>

<h1>or</h1>

<p>git push <remote> &lt;local_branch>:<branch></p>

<h1>Ex: git push origin foo:bar</h1>

<p>```</p>

<h3>Tracking branch</h3>

<h4>Creating a new tracking branch</h4>

<p>```
git checkout -b &lt;local_branch> <remote>/<branch></p>

<h1>Ex:</h1>

<h1>git checkout -b foo origin/foo</h1>

<h1>git checkout -b bar origin/foo # local branch has a different name</h1>

<h1>Alternative:</h1>

<p>git checkout &mdash;track origin/foo</p>

<h1>Local branch has a different name</h1>

<p>git checkout -b bar &mdash;track origin/foo</p>

<h1>Within a tracking branch, push and pull automatically knows which server and branch to push to/pull from</h1>

<p>git pull
git push
```</p>

<h4>Setting up tracking information for an existing branch</h4>

<p>```
git branch &mdash;set-upstream <remote>/<branch> &lt;local_branch></p>

<h1>or</h1>

<p>git branch -u <remote>/<branch> &lt;local_branch></p>

<h1>Ex:</h1>

<h1>git branch -u origin/foo # when within branch foo</h1>

<h1>git branch -u origin/foo foo # when not within branch foo</h1>

<h1>Pull branch</h1>

<p>git pull <remote> <branch></p>

<h1>Delete branch</h1>

<p>git push <remote> :<branch>
```</p>

<h4>Pruning stale remote branches</h4>

<p>```
git remote show origin</p>

<pre><code>master    tracked
refs/remotes/origin/fix        stale (use 'git remote prune' to remove)
refs/remotes/origin/story_5008 stale (use 'git remote prune' to remove)
</code></pre>

<h1>Simulate deleting stale branches</h1>

<p>git remote prune origin &mdash;dry-run</p>

<h1>Actually delete stale branches</h1>

<p>git remote prune origin
```</p>

<h3>Commit</h3>

<p>```</p>

<h1>Switch to my branch</h1>

<p>git checkout <branch>
git status</p>

<h1>View diff per file</h1>

<p>git difftool</p>

<h1>Add all files in to staging area</h1>

<p>git add .
git status</p>

<h1>Commit to local repository</h1>

<p>git commit</p>

<h1>Switch to master</h1>

<p>git checkout master</p>

<h1>Pull down master updates</h1>

<p>git pull origin master
git checkout <branch></p>

<h1>Rewind my branch, pull down master updates, then add my update on top</h1>

<p>git rebase master
git checkout master</p>

<h1>Merge my update back to local master</h1>

<p>git merge <branch></p>

<h1>Pull down updates that occurred on canonical repository in the meantime</h1>

<p>git pull origin master</p>

<h1>Push local updates to canonical repository</h1>

<p>git push origin master
git log
```</p>

<h3>Reset</h3>

<p>```</p>

<h1>Changes after specified revision show up as uncommitted</h1>

<p>git reset SHA</p>

<h1>Changes after specified revision do not show up</h1>

<p>git reset SHA</p>

<h1>Unstage</h1>

<p>git reset HEAD <file></p>

<h1>Jump to 1 commit below HEAD, rolling back previous commit</h1>

<p>git reset HEAD~1</p>

<h1>Reset everything to HEAD, overwriting local changes&hellip;caution!</h1>

<p>git reset &mdash;hard HEAD
```</p>

<h3>Show</h3>

<p>```</p>

<h1>View diff</h1>

<p>git show SHA</p>

<h1>View content of file</h1>

<p>git show SHA:file
```</p>

<h3>Filing away local changes</h3>

<p>Create a new branch and commit the desired changes to it:</p>

<p><code>
git branch &lt;branch&gt;
git checkout &lt;branch&gt;
git add &lt;files&gt;...
git commit
</code></p>

<p>Merging origin changes with local changes:</p>

<p>```
git checkout <branch>
git add <file>
git commit
git checkout master
git pull origin master
git checkout <branch>
git rebase master</p>

<h1>Resolve conflicts</h1>

<p>git rebase &mdash;continue</p>

<h1>Roll back your commit</h1>

<p>git reset HEAD~1
```</p>

<p>Better:</p>

<p><code>
git checkout &lt;branch&gt;
git stash
git checkout master
git pull origin master
git checkout &lt;branch&gt;
git rebase master
git stash pop
</code></p>

<h3>Merging multiple branches</h3>

<pre><code>Branch 2
|
Branch 1 (committed)
|
master
</code></pre>

<p>```
git commit
git checkout branch1
git merge branch2</p>

<h1>Pick one commit and stash the other, then edit aggregate comment for both commits from the previous branch1 and branch2 comments</h1>

<p>git rebase -i master
git co master</p>

<h1>Merge aggregate commits into master</h1>

<p>git merge branch1</p>

<h1>Should see aggregate comment</h1>

<p>git log
```</p>

<h3>Tag</h3>

<p>```</p>

<h1>Check out a tag</h1>

<p>git checkout 2011-09-16</p>

<h1>Make sure your local master contains EXACTLY what you want tagged &mdash; &ldquo;git log&rdquo; to double check</h1>

<p>git checkout master</p>

<h1>Create a tag</h1>

<p>git tag -a &ldquo;tag name&rdquo;</p>

<h1>This removes the tag from your local master</h1>

<p>git tag -d &ldquo;tag name&rdquo;</p>

<h1>DANGER &ndash; the colon tells git to DELETE something &mdash; without a confirm prompt ! &mdash; here, we&rsquo;re deleting the remote master&rsquo;s tag</h1>

<p>git push origin :&ldquo;tag name&rdquo;</p>

<h1>This creates the tag on your local master</h1>

<p>git tag &ldquo;tag name&rdquo;</p>

<h1>This pushes the new tag back onto remote master</h1>

<p>git push &mdash;tags</p>

<h1>List tags</h1>

<p>git tag</p>

<h1>Fetch all tags</h1>

<p>git fetch &mdash;tags
```</p>
]]></content>
  </entry>
  
</feed>
