<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yen's Blog]]></title>
  <link href="http://dinhyen.github.io/atom.xml" rel="self"/>
  <link href="http://dinhyen.github.io/"/>
  <updated>2014-11-12T23:52:33-05:00</updated>
  <id>http://dinhyen.github.io/</id>
  <author>
    <name><![CDATA[Yen Tran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular in Jekyll/Octopress]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/18/angular-in-jekyll-or-octopress/"/>
    <updated>2014-04-18T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/18/angular-in-jekyll-or-octopress</id>
    <content type="html"><![CDATA[<p>Have a problem with Angular scope variable binding not working on a Jekyll or Octopress (which uses Jekyll) page?  It so happens that Jekyll&rsquo;s Liquid Template uses the same  syntax as Angular and would attempt to process the markup before Angular can get to it.  To get around the problem, you can surround Angular markup with <code>&#123;% raw %&#125;</code> and <code>&#123;% endraw %&#125;</code> tags.  Alternatively, you can also forgo from using this syntax altogether and use Angular&rsquo;s <code>ng-bind</code> directive to bind a variable to a DOM element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copying files in Hudson]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/15/copying-files-in-hudson/"/>
    <updated>2014-04-15T20:05:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/15/copying-files-in-hudson</id>
    <content type="html"><![CDATA[<p>Copying files somewhere is pretty standard procedure when deploying an app.  Interestingly I&rsquo;ve never had to copy files directly in Hudson.  Until now I&rsquo;ve only deployed .NET apps in Hudson and used MSBuild&rsquo;s Copy task to copy the files to a share folder.  Now that I want to deploy Angular and other client apps in Hudson, I&rsquo;d have to copy the files manually.</p>

<p>My initial attempt was to add a new Execute Shell build step to run <code>xcopy</code>.  Since Hudson executes the command through the Bourne shell, which interprets any backslash in the path as the escape character, I&rsquo;d have to escape the backslash itself.  Why Windows has to be different from everyone else is a major source of annoyance if you have to move back and forth between Windows and *nix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcopy c:\\source\\app\\* \\\\server\\share\\app</span></code></pre></td></tr></table></div></figure>


<p>This worked, but in order for xcopy to copy subdirectories, refrain from prompting everytime it needs to overwrite a file and take other actions necessary for unsupervised execution, I needed to specify additional parameters.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcopy c:\\source\\app\\* \\\\server\\share /c /k /e /r /y /exclude:c:\\source\\xcopy_exclude.txt</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately this was when xcopy blows up with the &ldquo;invalid number of parameters&rdquo; error.  It probably had to do with the shell not passing the parameters to xcopy.  No dice if I put the command in a batch file then executing it.  Ditto when I tried <code>robocopy</code>, which prints a nicer error message but is functionally the same as xcopy.  As a note, you could test all of this in a Bourne shell rather than invoking Hudson every time.</p>

<p>It occurred to me to use something that&rsquo;s native to the shell, rather than trying to get it to play nice with xcopy.  You&rsquo;d still have to deal with the backslash in the share:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -r /c/source/app/* \\\\server\\share</span></code></pre></td></tr></table></div></figure>


<p>This worked!  Also for things like &ldquo;rm -rf&rdquo;.  We&rsquo;re done, right?  Well, this mixmatching of different command-line styles seems unwieldy.  After I experimented further, it turned out that I had made an error from the start.  In addition to the Execute Shell build step, there&rsquo;s another type called Execute Windows Batch Command.  This build step allows you to run commands in a Windows shell.  Thus you can run execute xcopy, or anything else, as you would in the command prompt without needing to escape backslash.</p>

<p>I&rsquo;d also like to be able to specify the share folder at run time so the project can be deployed to different servers.  In my initial attempt, I created a drop-down list parameter for the server name.  Then I figured to use the following xcopy command which incorporates the SERVER parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcopy c:\source\app\* \\%SERVER%\app</span></code></pre></td></tr></table></div></figure>


<p>The %SERVER% syntax is used to reference an environment variable in Windows.  This approach turned out to be an abject failure.  It turned out that entire share has to be specified as an environment variable; e.g., %SHARE% should point to \server\app.  Then I could issue commands such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>del /s /q %SHARE%\*
</span><span class='line'>xcopy c:\source\app\* %SHARE%</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A MoCA home network]]></title>
    <link href="http://dinhyen.github.io/blog/2014/04/09/moca-home-network/"/>
    <updated>2014-04-09T13:27:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2014/04/09/moca-home-network</id>
    <content type="html"><![CDATA[<p>The benefits of a wired home network are many.  I use the <a href="http://www.silicondust.com/products/hdhomerun/prime">SiliconDust HDHomerun Prime</a> network TV tuners to watch cable TV on any computer in the house without the need for a set-top box.  However, it is quite bandwidth-intensive and even a wireless-N connection just doesn&rsquo;t cut it.  The picture would be plagued with stutters, pause and artifacts and pretty much unwatchable, especially for hockey with its lightning-fast actions.</p>

<p>For wired connectivity without an existing Ethernet network there are three options.  The best option from both cost and performance standpoints is available if the house is wired for a land line with Cat-5/5e/6 wiring, which is invariably the case with a modern construction.  In this case you can just repurpose the existing wiring and swap out the RJ11 telephone jacks for RJ45 Ethernet jacks.  This requires a bit of manual labor but the results are beautiful and satisfying.  I did this for a previous residence and it worked wonderfully. Unfortunately in my current house the wiring leaves something to be desired.  The phones lines are not wired point-to-point but daisy-chained together; this rules out an Ethernet network.</p>

<p>The second option is to use the power lines themselves, which hopefully every house comes equipped with. I used a pair of TP-Link AV500 Nano power line adapters.  Installation couldn&rsquo;t be any easier&mdash;plug them into the power sockets and they just work. The LAN connection is automatically detected in Windows and OS X.  My tests showed that the connection was able to achieve the the full bandwidth that I am supposed to get. My TV feed no longer stuttered or became corrupted. Unfortunately this solution isn&rsquo;t perfect either.  Under heavy load the adapters had a nasty habit of tripping the circuit breakers.  I couldn&rsquo;t even run the network speed test while Windows Media Center was playing without bringing the power down.  Since the powerline adapters don&rsquo;t play nice with surge protectors I don&rsquo;t really have a way to prevent it from happening.</p>

<p>This leaves the last option, a home network over the coaxial cabling, which like most American household we have plenty of. Each room has one coaxial outlet, or even two. The industry standard for a home network over coaxial cabling is the Multimedia over Coaxial Alliance (MoCA) standard.  It seems to be a relatively young technology as there aren&rsquo;t many products for it. Interestingly this is something I&rsquo;m already using as a Verizon FiOS subscriber.  Verizon uses MoCA for the Optical Network Terminal (ONT) which converts the optical fiber signal to electric signal. To use the coaxial cabling to carry Ethernet network traffic requires a MoCA network adapter or bridge, which converts between the different signal formats. I have the standard <a href="http://www.actiontec.com/189.html">Actiontec MI424WR router</a>, which has a built-in MoCA adapter.   It would act as one endpoint.  For each additional endpoint, I would need a separate MoCA network adapter. There are only a handful of MoCA network adapters, the most popular of which the <a href="http://www.actiontec.com/251.html">Actiontec ECB2500C</a>.</p>

<p>I wasn&rsquo;t sure about the best way to set up the MoCA network.  The MI424WR router can connect to the ONT via a coaxial or Cat-5 cable. In my case the MoCA WAN comes into the router via the coaxial connection. However, since the router has only one coaxial terminal, I wasn&rsquo;t sure whether I could connect to the MoCA LAN using the same coaxial terminal. I thought that since the router is connected to the MoCA WAN coaxially, I would need an additional MoCA adapter for each outgoing connection from the router to the MoCA LAN.  This possible setup is shown in the below figure.  I would need 4 MoCA adapters to extend connectivity to 2 rooms.</p>

<p><img src="http://yentran.isamonkey.org/gallery/moca-home-network/moca-bad.png" alt="" /></p>

<p>Fortunately, this scenario isn&rsquo;t necessary.  It turns out that the router can connect to both MoCA WAN and MoCA LAN through the same coaxial connection. This is because the respective networks operate over different frequency bands and do not interfere with each other. I would only need a MoCA adapter at each receiving end.  Since I can use the router as a MoCA adapter in one room, I&rsquo;d only need one additional MoCA adapter.</p>

<p><img src="http://yentran.isamonkey.org/gallery/moca-home-network/moca-good.png" alt="" /></p>

<p>If you need more than one Ethernet port, Adaptec also makes a 4-port Home Theater Coaxial Network Adapter (ECB3500T01), which is only marginally more expensive than a 1-port adapter.  It would be a more compact solution than using an Ethernet switch with the 1-port adapter.</p>

<p>Of note, the cable splitter must be MoCA-compatible. Since MoCA operates in the 0.5-1.65 GHz frequence band, the splitter should be rated for at least this range. Fortunately there are many inexpensive options.</p>

<p>Update (Oct 9, 2014): It turns out that Verizon sells a Verizon-branded <a href="https://teleproducts.verizon.com/fileshare/plm/brochure/ATWECB3000N_brochure.pdf">Fios wireless network extender</a> for $75 which comes with 2 Gigabit Ethernet ports as well as Wireless-N and MoCA connectivity, ostensibly to extend a home network to hard-to-reach places.  In retrospect the Wireless-N Wi-Fi extender would have made it a better purchase than the 4-port Home Theater Coaxial Network Adapter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple tasks with Grunt]]></title>
    <link href="http://dinhyen.github.io/blog/2014/03/03/simple-tasks-with-grunt/"/>
    <updated>2014-03-03T15:16:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/03/03/simple-tasks-with-grunt</id>
    <content type="html"><![CDATA[<p>Developers are lazy by nature and always look for ways to avoid having to perform repetitive tasks. There are plenty of options when you&rsquo;re working with conventional server-side platforms.  Unfortunately, when it comes to JavaScripts and CSS, automation tools are harder to find. That is, until Grunt comes along (following Node, which turned upside down the whole idea of server vs client side in the first place).</p>

<p>As a self-described &ldquo;task runner&rdquo;, Grunt is powerful and pleasantly approachable.  Its succinctness makes it a joy to use.  This carries over into the Grunt documentation, which is really excellent.  Inspired by the <a href="http://gruntjs.com/sample-gruntfile">Sample Gruntfile tutorial</a>, I&rsquo;d like to walk through my own <code>Gruntfile</code> created for a <a href="https://github.com/dinhyen/darkbox">small JavaScript library</a>.  The goal is to automate a typical process of building the app, from generating CSS from Sass, aggregating various source files into a single file, and minifying the result.</p>

<p>Once you <a href="http://gruntjs.com/installing-grunt">have Grunt installed</a> using the Node Package Manager, you will need a <code>package.json</code> file, just as for other Node utilities.  The quickest way to create a <code>package.json</code> file is to simply run <code>npm init</code> which generates the file after a series of questions.</p>

<p>The following libraries will be used:</p>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-compass">grunt-contrib-compass</a>: generates CSS from Sass</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-concat">grunt-contrib-concat</a>: combines various files into a single file</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-cssmin">grunt-contrib-cssmin</a>: minifies CSS</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-jshint">grunt-contrib-jshint</a>: combs through JavaScript and flags errors or usage issues</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-uglify">grunt-contrib-uglify</a>: mangles and minifies JavaScript</li>
<li><a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a>: performs tasks whenever a file changes</li>
</ul>


<p>The recommended approach, as stated at the beginning of the documentation for each plugin, is to run <code>npm install grunt-contrib-xxx --save-dev</code>, which has the dual benefit of installing the plugin and also adding a reference to it in <code>package.json</code>.</p>

<p>Besides <code>package.json</code>, the only other file you need is <code>Gruntfile</code>, in which you define and configure the tasks to run. Configuration options are specified as the argument to <code>grunt.initConfig</code>.</p>

<p>The first line reads in <code>package.json</code> and turns it into an object.  In this case, I&rsquo;m interested in product name, but it can provide <a href="http://package.json.nodejitsu.com">many other useful properties</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>All <code>Gruntfile</code> tasks share the <a href="http://gruntjs.com/configuring-tasks">same basic syntax</a> for specifying options, input and output.  Each task&rsquo;s configuration block is named after the plugin; for example, the configuration block for the <code>grunt-contrib-uglify</code> is simply <code>uglify</code>.  Each task can have arbitrary targets.  You&rsquo;ll probably see a &ldquo;test&rdquo; target for testing or a &ldquo;dist&rdquo; target for building a distribution.  Since I want to build CSS and JavaScript, here I have 2 targets, &ldquo;scripts&rdquo; and &ldquo;stylesheets&rdquo;.  When there are multiple targets in a task, each target can be executed directly.  For example, <code>grunt concat:scripts</code> runs just the &ldquo;scripts&rdquo; target.  If you don&rsquo;t provide a target, then all targets would be run in order.</p>

<p>The Compass task generates CSS from Sass source.  Of course, Compass <a href="http://compass-style.org/install">must be installed</a> first.  The following options simply instruct Compass to process Sass files in the directory &ldquo;sass&rdquo; and generate the corresponding CSS files in the directory &ldquo;css&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">compass</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sassDir</span><span class="o">:</span> <span class="s1">&#39;sass&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">cssDir</span><span class="o">:</span> <span class="s1">&#39;css&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When developing, it would be nice to be able to preview changes made to the Sass source.  This is where the watch plugin comes in.  In the simplest use case it simply detects that one or more files have been changed and then runs certain tasks.  The following options allow me to re-generate CSS each time a Sass file is modified.  Start watching by typing <code>grunt watch</code> at the command prompt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;compass&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Typically JavaScript and CSS source is distributed over multiple files.  In production you&rsquo;d want to combine the various source files into a single file for performance reason.  This can be done with the concat plugin.  For the source, I&rsquo;m using a globbing pattern for simplicity; <code>src/**/*.js</code> means all <code>.js</code> files in the <code>src</code> directory and any of its sub-directories.  The files would be combined in alphabetical order. An alternative would be to specify an array of individual files.  While this lets you control the ordering of files, it becomes unwieldy for a large number of files. Of course, there are <a href="http://gruntjs.com/configuring-tasks#globbing-patterns">many ways</a> to skin the cat.  For the output, I&rsquo;m using the project&rsquo;s name which comes from <code>package.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">separator</span><span class="o">:</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;src/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.js&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;css/**/*.css&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.css&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The cssmin plugin provides CSS minification.  The source should be the output of the concat stage.  Note the variable substitution syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cssmin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&lt;%= concat.stylesheets.dest %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.min.css&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The uglify plugin is the JavaScript equivalent of cssmin.  It also mangles variable names which reduces file size further at the expense of readability.  Since mangling pretty much makes your JavaScript indecipherable and impossible to debug, you can also provide a <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">source map</a> which lets you view the original, non-uglified source when debugging.  The uglify plugin have all these and sundry options.  Here it also inserts a comment with some basic information at the top of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">uglify</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">banner</span><span class="o">:</span> <span class="s1">&#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sourceMap</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&lt;%= concat.scripts.dest %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.min.js&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The jshint configuration block just sets some <a href="http://www.jshint.com/docs/options">options for jshint</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">curly</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">eqeqeq</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">immed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">latedef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">newcap</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">noarg</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sub</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">undef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">unused</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">boss</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">eqnull</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">node</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally register a default task and a useful task.  Tasks would be executed in the order specified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">,</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="s1">&#39;concat&#39;</span><span class="p">,</span> <span class="s1">&#39;cssmin&#39;</span><span class="p">,</span> <span class="s1">&#39;uglify&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;sassify&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;compass&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run a task, simply specify the task&rsquo;s name as a argument to <code>grunt</code> on the command line; e.g., <code>grunt jshint</code>.  Simply typing <code>grunt</code> runs the default task.  Below is the output for running the default task; even for this small set of tasks, running them manually or maintaining a script without Grunt would have been a tedious chore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Running</span> <span class="s2">&quot;jshint:scripts&quot;</span> <span class="p">(</span><span class="nx">jshint</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="nx">files</span> <span class="nx">lint</span> <span class="nx">free</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;compass:stylesheets&quot;</span> <span class="p">(</span><span class="nx">compass</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">unchanged</span> <span class="nx">sass</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">scss</span>
</span><span class='line'><span class="nx">unchanged</span> <span class="nx">sass</span><span class="o">/</span><span class="nx">mixins</span><span class="p">.</span><span class="nx">scss</span>
</span><span class='line'><span class="nx">unchanged</span> <span class="nx">sass</span><span class="o">/</span><span class="nx">screen</span><span class="p">.</span><span class="nx">scss</span>
</span><span class='line'><span class="nx">Compilation</span> <span class="nx">took</span> <span class="mf">0.012</span><span class="nx">s</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;concat:scripts&quot;</span> <span class="p">(</span><span class="nx">concat</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">File</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">js</span> <span class="nx">created</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;concat:stylesheets&quot;</span> <span class="p">(</span><span class="nx">concat</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">File</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">css</span> <span class="nx">created</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;cssmin:stylesheets&quot;</span> <span class="p">(</span><span class="nx">cssmin</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">File</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">css</span> <span class="nx">created</span><span class="o">:</span> <span class="mf">3.9</span> <span class="nx">kB</span> <span class="err">→</span> <span class="mf">2.78</span> <span class="nx">kB</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Running</span> <span class="s2">&quot;uglify:scripts&quot;</span> <span class="p">(</span><span class="nx">uglify</span><span class="p">)</span> <span class="nx">task</span>
</span><span class='line'><span class="nx">File</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">map</span> <span class="nx">created</span> <span class="p">(</span><span class="nx">source</span> <span class="nx">map</span><span class="p">).</span>
</span><span class='line'><span class="nx">File</span> <span class="nx">dist</span><span class="o">/</span><span class="nx">darkbox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span> <span class="nx">created</span><span class="o">:</span> <span class="mf">5.45</span> <span class="nx">kB</span> <span class="err">→</span> <span class="mf">2.51</span> <span class="nx">kB</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Done</span><span class="p">,</span> <span class="nx">without</span> <span class="nx">errors</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the entire <code>Gruntfile</code>.  Happy grunting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">compass</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">sassDir</span><span class="o">:</span> <span class="s1">&#39;sass&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">cssDir</span><span class="o">:</span> <span class="s1">&#39;css&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">concat</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">separator</span><span class="o">:</span> <span class="s1">&#39;;&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;src/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.js&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;css/**/*.css&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.css&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">cssmin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&lt;%= concat.stylesheets.dest %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.min.css&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">curly</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">eqeqeq</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">immed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">latedef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">newcap</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">noarg</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sub</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">undef</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">unused</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">boss</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">eqnull</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">node</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;src/*.js&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">uglify</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">banner</span><span class="o">:</span> <span class="s1">&#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sourceMap</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">scripts</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="s1">&#39;&lt;%= concat.scripts.dest %&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">dest</span><span class="o">:</span> <span class="s1">&#39;dist/&lt;%= pkg.name %&gt;.min.js&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">stylesheets</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="s1">&#39;**/*.scss&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;compass&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-compass&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-concat&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-cssmin&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-uglify&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">,</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="s1">&#39;concat&#39;</span><span class="p">,</span> <span class="s1">&#39;cssmin&#39;</span><span class="p">,</span> <span class="s1">&#39;uglify&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;sassify&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;compass&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques impressions sur la culture française]]></title>
    <link href="http://dinhyen.github.io/blog/2014/02/09/quelques-impressions-sur-la-culture-francaise/"/>
    <updated>2014-02-09T10:10:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/02/09/quelques-impressions-sur-la-culture-francaise</id>
    <content type="html"><![CDATA[<p>Il me parait que nous avons les même ou presque les même idées sur la notion d’amitié.  Celles-ci sont les idées qu’un ami est quelqu’un avec qui on a des gôuts en commun, avec qui on aime passer du temps, qui on s’entend très bien, sur qui on peut compter, en qui on peut faire confiance, qui n’hésite pas à l’aider aux moments difficiles, ou qui respecte les opinions de l’autre et qui partage ses opinions sans hésitation.  Mails je pense qu’il existe une différence entre nous.  Pour les Francais il existe deux catégories, les amis et les copains.  Pour les Américains, il y a aussi quelques catégories, comme &ldquo;friends&rdquo; ou &ldquo;acquaintances&rdquo;, qui peut être l’equivalence pour &ldquo;copain&rdquo;.  Mails généralement, la démarcation entre les catégories n’est pas très claire. Un copain est quelqu’un avec qui on peut échanger des salutations à la classe le matin.  On a tendance à appeler quelqu’un un ami quand on lui parle souvent, même si on ne le connait pas très bien.  De même façon, on est prêt à considérer un étranger un ami après l’avoir seulement  rencontré quelques fois, bien que peut-être il ne soit pas un bon ami.  Il y a un concept appelé &ldquo;making friends&rdquo;.  Quand on va quelque part, on essaie de dialoguer et rencontrer plusieurs personnes pour s’adapter; on essaie de ne pas être seul.  Dans un cas radical, il y a des personnes qui se rencontrent sur l’Internet et qui considérent l’autre un ami, même s’ils ne se rencontrent jamais en face!</p>

<p>Sur le forum, il est clair que pour vous il y a une grande distinction entre un ami et un copain.  Par exemple, pour vous les autres étudiants en classes préparatoires peut-être sont votre copains parce que vous ne les revoyez plus après, bien que vous les rencontriez souvent.  Pour nous, les camarades de classe sont souvent notre bons amis, précisément parce que nous les rencontrons tous les jours.  C’est mon impression que les Américains sont un peu plus ouverts à l’egard d’amitié.  Comment pensez-vous de cette vue?  Elle est d’accord avec l’auteur Caroll.  Selon elle, les enfants américains sont encouragés à &ldquo;jouer avec d’autres enfants du même age&rdquo; ou à &ldquo;apprendre à entrer en relation avec des étrangers&rdquo;.  Est-ce que les parents français encouragent leurs enfants à faire comme ça?</p>

<p>J’ai un deuxième commentaire sur l’éducation d’enfant en France et aux E.U.  Je suis d’accord avec l’auteur que les enfants français devraient se comporter bien dans la société, donc ils apprennent les notions de discipline, de respect, d’être responsables. En revanche, les enfants américains ont plus de libertés dont leurs parents croient qu’ils ont besoin pour explorer, pour se dévélopper, pour s’epanouir.  Elle a raison, mais selon moi ce n’implique pas que les enfants américains sont laissés tout faire!  Au moin, la notion de politesse est un élément très important dans l’éducation des enfants américains.  Par exemple, les mots &ldquo;merci&rdquo; et &ldquo;s’il vous plait&rdquo; sont les plus accentués, comme &ldquo;les mots magiques&rdquo;, par les parents.  Ce n’est pas très étonnant que les Américains, les enfants et même les adultes, utilisent ces mots très souvent.  Ce n’est pas étonnant aussi que les Américains sont expertes dans les entreprises de service, dans lesquelles la politesse et l’attention pour les clients sont très importants.  On peut généraliser les principes fondamentaux, mais l’actualité est souvent plus compliquée.  Je suis d’accord avec Matthieu, qui a remarqué que les relations entre parents et enfants, françaises ou américaines, dépendent de la personnalité des parents, de leur conviction sur l’éducation, ou de la façon dont ils ont été élévés.À l’egard d’éléver un enfant, je pense qu’il est préférable qu’on l’aide et l’influence au lieu de le forcer à faire quelquechose.  En revanche, on doit intervenir quand il va faire mal et, si nécessaire, je crois qu’on peut le gronder ou lui donner une fessée. Surtout, il est essentiel de lui donner les occasions de s’explorer.  On devrait l’encourager à découvrir lui-même ce qu’il aime, ce qu’il veut devenir, ce qu’il veut étudier à l’université, etc.  Bien sûr, on devrait l’encourager à suivre une bonne voie ou à choisir un bon métier, mais toujours on l’encourage à avoir l’indépendance de pensées et d’actions.  Par exemple, l’enfant voudrait devenir une artiste; même si ses parents désireraient qu’il devienne un médécin, ils le soutiendront encore.  Les parents sont les conseillers et aussie une autorité. Je pense que c’est un aspect très positif de la philosophie d’éducation américaine, parce qu’il est probable que l’enfant sera heureux dans la vie.  Il parait que le système français est plus rigide, dans le sens que l’enfant doit obéir aux désirs des parents.  Est-ce que c’est vrai ou faux?  Pensez-vous que l’indépendance de pensée est importante pour les enfants? Selon l’auteur, les parents français et leur manière d’éducation de leurs enfants sont soumis à un &ldquo;test&rdquo; par le reste de la sociéte.  Trouvez-vous naturel si les autres donnent conseil aux parents pour éduquer leurs enfants ou les reprimandent?  Je pense que l’éducation d’un enfant est une affaire très privée.  Je saurais quand mon enfant n’a pas de comportement acceptable.  Je serais prêt à recevoir les conseils de la famille ou d’amis, parce qu’ils auraient les désirs sincères, mais je ne pense pas que les jugements de l’autre soient appropriés.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Git cheat sheet]]></title>
    <link href="http://dinhyen.github.io/blog/2014/02/07/my-git-cheat-sheet/"/>
    <updated>2014-02-07T16:02:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/02/07/my-git-cheat-sheet</id>
    <content type="html"><![CDATA[<p>There are lots of great Git guides out there.  This is intended simply to be a reference for me during those dark times when I can&rsquo;t remember the syntax for creating a tracking branch.</p>

<h3>Config</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># These will show up in git log
</span><span class='line'>git config --global user.name "Yen Tran"
</span><span class='line'>git config --global user.email yen@yentran.org
</span><span class='line'>git config --list</span></code></pre></td></tr></table></div></figure>


<h3>Info</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gitk
</span><span class='line'>git status
</span><span class='line'>git log
</span><span class='line'>git log origin/master
</span><span class='line'># Show endpoints such as origin
</span><span class='line'>git remote show
</span><span class='line'># Show origin params
</span><span class='line'>git remote show origin</span></code></pre></td></tr></table></div></figure>


<h3>Branch (Local)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch &lt;branch&gt; &lt;sha1_of_commit&gt;
</span><span class='line'># Ex: git branch foo 7e2785d</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Delete branch
</span><span class='line'>git branch -d &lt;branch&gt;
</span><span class='line'>
</span><span class='line'># Create branch:
</span><span class='line'>git branch &lt;branch&gt;
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'># Check out and automatically creates branch
</span><span class='line'>git checkout -b &lt;branch&gt;
</span><span class='line'># List local branches
</span><span class='line'>git br 
</span><span class='line'># List remote branches
</span><span class='line'>git branch -r
</span><span class='line'># List all branches
</span><span class='line'>git branch -a
</span><span class='line'># Verbose list of local branches and HEAD commit
</span><span class='line'>git branch -v</span></code></pre></td></tr></table></div></figure>


<h3>Check out a previous check-in</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log
</span><span class='line'>#  Locate desired checkin and copy SHA; e.g., f2bc540fc6817b0409571f6e5a562dffa6396017
</span><span class='line'>git checkout &lt;SHA&gt;
</span><span class='line'># Do stuff, publish, etc.
</span><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<h3>Cherry-pick</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Source branch
</span><span class='line'>git co 2012-01-01-A
</span><span class='line'># Get top log entry
</span><span class='line'>git log -1
</span><span class='line'># Copy first few characters of SHA hash
</span><span class='line'># Destination branch
</span><span class='line'>git co master
</span><span class='line'>git cherry-pick 96f39d92de93
</span><span class='line'># Review changes
</span><span class='line'>git diff HEAD~1</span></code></pre></td></tr></table></div></figure>


<h3>Clone</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># SSH keys under ~/.ssh
</span><span class='line'>git clone git@donny:repo.git
</span><span class='line'># Directory is optional; automatically created if not specified
</span><span class='line'>git clone gitolite@donny:repo.git [directory]</span></code></pre></td></tr></table></div></figure>


<h3>Commit</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Also automatically stage and commit
</span><span class='line'>git commit -a -m "commit message here"
</span><span class='line'># Add to previous commit or Rename a commit message
</span><span class='line'>git commit --amend
</span><span class='line'># Select reword for the desired commit in the interactive editor
</span><span class='line'># Edit the message
</span><span class='line'># Save
</span><span class='line'>git rebase -i master</span></code></pre></td></tr></table></div></figure>


<h3>Create new repo</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>#  So that subsequent add can ignore files
</span><span class='line'>git add .gitignore
</span><span class='line'>git remote add origin git@donny:repo.git
</span><span class='line'>git remote add origin git@github.com:user/repo.git
</span><span class='line'># add and commit files (-u option updates local)
</span><span class='line'>git push -u origin master</span></code></pre></td></tr></table></div></figure>


<h3>Diff</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Graphical version
</span><span class='line'>git difftool
</span><span class='line'>git diff &lt;directory&gt;
</span><span class='line'>git difftool HEAD~1
</span><span class='line'># Diff files that have been staged
</span><span class='line'>git diff --cached
</span><span class='line'># Diff local changes against repository
</span><span class='line'>git diff origin/master</span></code></pre></td></tr></table></div></figure>


<h3>Help</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>man git-log
</span><span class='line'>man git-show
</span><span class='line'># etc.</span></code></pre></td></tr></table></div></figure>


<h3>Log</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Get top 1 log entry
</span><span class='line'>git log -1
</span><span class='line'># Show history beyond renames
</span><span class='line'>git log --follow file
</span><span class='line'># Include diffs
</span><span class='line'>git log -p file</span></code></pre></td></tr></table></div></figure>


<h3>Stage</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add &lt;file&gt;...
</span><span class='line'>git add .
</span><span class='line'># Opposite of add; use when files are renamed, etc.
</span><span class='line'>git rm &lt;file&gt;...</span></code></pre></td></tr></table></div></figure>


<h3>Stash</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git stash
</span><span class='line'>git stash list
</span><span class='line'># Show changes in stash, where 0 is the number of the stashed item as shown by git stash list
</span><span class='line'>git show @{0}
</span><span class='line'># Drop specified stash where xx is number shown in stash list
</span><span class='line'>git stash drop stash@{xx}</span></code></pre></td></tr></table></div></figure>


<h3>Drop local changes</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Change state of working copy to match repository, if file has not been added to index/staging
</span><span class='line'>git checkout -- &lt;filename&gt;
</span><span class='line'># Ditto, but if file has been added to index
</span><span class='line'>git reset &lt;filename&gt;
</span><span class='line'>git stash save --keep-index</span></code></pre></td></tr></table></div></figure>


<h3>Pull</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull origin master
</span><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<h3>Rebase: resolve conflict</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git rebase master
</span><span class='line'>git status
</span><span class='line'>git add &lt;file&gt;
</span><span class='line'># Fix conflicts
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>


<h3>Rebase: interactive</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase -i origin/master
</span><span class='line'>git rebase -i
</span><span class='line'># In the text editor, select s or squash on the bottom-most commits to squash them</span></code></pre></td></tr></table></div></figure>


<h3>Refs</h3>

<p>You may get this error when running &ldquo;git branch -d foo&rdquo;:
warning: deleting branch &lsquo;foo&rsquo; that has been merged to &lsquo;refs/remotes/origin/foo&rsquo;, but not yet merged to HEAD.
Deleted branch foo (was 334730a).
From <a href="http://stackoverflow.com/questions/18506456/git-how-to-delete-a-local-ref-branch:">http://stackoverflow.com/questions/18506456/git-how-to-delete-a-local-ref-branch:</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Remove local ref
</span><span class='line'>git update-ref -d refs/remotes/origins/foo</span></code></pre></td></tr></table></div></figure>


<h3>Ref log</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reflog</span></code></pre></td></tr></table></div></figure>


<h3>Remote</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Remove origin
</span><span class='line'>git remote rm origin
</span><span class='line'>git remote add origin git@server:repo.git
</span><span class='line'>git remote show origin</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Change origin URL
</span><span class='line'>git remote set-url origin git@server:repo.git</span></code></pre></td></tr></table></div></figure>


<h3>Remote Branch</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Create branch. Reference: http://git-scm.com/book/en/Git-Branching-Remote-Branches
</span><span class='line'>git branch &lt;branch&gt;
</span><span class='line'># Show local branches configured for push/pull, i.e. tracking branches
</span><span class='line'>git remote show origin
</span><span class='line'>git push &lt;remote&gt; &lt;branch&gt;
</span><span class='line'># Ex: git push origin foo
</span><span class='line'># or
</span><span class='line'>git push &lt;remote&gt; &lt;local_branch&gt;:&lt;branch&gt;
</span><span class='line'># Ex: git push origin foo:bar</span></code></pre></td></tr></table></div></figure>


<h3>Tracking branch</h3>

<h4>Creating a new tracking branch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b &lt;local_branch&gt; &lt;remote&gt;/&lt;branch&gt; 
</span><span class='line'># Ex:
</span><span class='line'>#   git checkout -b foo origin/foo
</span><span class='line'>#   git checkout -b bar origin/foo # local branch has a different name
</span><span class='line'># Alternative:
</span><span class='line'>git checkout --track origin/foo
</span><span class='line'># Local branch has a different name
</span><span class='line'>git checkout -b bar --track origin/foo
</span><span class='line'># Within a tracking branch, push and pull automatically knows which server and branch to push to/pull from
</span><span class='line'>git pull
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<h4>Setting up tracking information for an existing branch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch --set-upstream &lt;remote&gt;/&lt;branch&gt; &lt;local_branch&gt;
</span><span class='line'># or
</span><span class='line'>git branch -u &lt;remote&gt;/&lt;branch&gt; &lt;local_branch&gt;
</span><span class='line'># Ex:
</span><span class='line'># git branch -u origin/foo # when within branch foo
</span><span class='line'># git branch -u origin/foo foo # when not within branch foo
</span><span class='line'># Pull branch
</span><span class='line'>git pull &lt;remote&gt; &lt;branch&gt;
</span><span class='line'># Delete branch
</span><span class='line'>git push &lt;remote&gt; :&lt;branch&gt;</span></code></pre></td></tr></table></div></figure>


<h4>Pruning stale remote branches</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote show origin
</span><span class='line'>    master    tracked
</span><span class='line'>    refs/remotes/origin/fix        stale (use 'git remote prune' to remove)
</span><span class='line'>    refs/remotes/origin/story_5008 stale (use 'git remote prune' to remove)
</span><span class='line'># Simulate deleting stale branches
</span><span class='line'>git remote prune origin --dry-run
</span><span class='line'># Actually delete stale branches
</span><span class='line'>git remote prune origin</span></code></pre></td></tr></table></div></figure>


<h3>Commit</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Switch to my branch
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git status
</span><span class='line'># View diff per file
</span><span class='line'>git difftool
</span><span class='line'># Add all files in to staging area
</span><span class='line'>git add .
</span><span class='line'>git status
</span><span class='line'># Commit to local repository
</span><span class='line'>git commit
</span><span class='line'># Switch to master
</span><span class='line'>git checkout master
</span><span class='line'># Pull down master updates
</span><span class='line'>git pull origin master
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'># Rewind my branch, pull down master updates, then add my update on top
</span><span class='line'>git rebase master
</span><span class='line'>git checkout master
</span><span class='line'># Merge my update back to local master
</span><span class='line'>git merge &lt;branch&gt;
</span><span class='line'># Pull down updates that occurred on canonical repository in the meantime
</span><span class='line'>git pull origin master
</span><span class='line'># Push local updates to canonical repository
</span><span class='line'>git push origin master
</span><span class='line'>git log</span></code></pre></td></tr></table></div></figure>


<h3>Reset</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Changes after specified revision show up as uncommitted
</span><span class='line'>git reset SHA
</span><span class='line'># Changes after specified revision do not show up
</span><span class='line'>git reset SHA
</span><span class='line'># Unstage
</span><span class='line'>git reset HEAD &lt;file&gt;
</span><span class='line'># Jump to 1 commit below HEAD, rolling back previous commit
</span><span class='line'>git reset HEAD~1
</span><span class='line'># Reset everything to HEAD, overwriting local changes...caution!
</span><span class='line'>git reset --hard HEAD</span></code></pre></td></tr></table></div></figure>


<h3>Show</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># View diff
</span><span class='line'>git show SHA
</span><span class='line'># View content of file
</span><span class='line'>git show SHA:file</span></code></pre></td></tr></table></div></figure>


<h3>Filing away local changes</h3>

<p>Create a new branch and commit the desired changes to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch &lt;branch&gt;
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git add &lt;files&gt;...
</span><span class='line'>git commit</span></code></pre></td></tr></table></div></figure>


<p>Merging origin changes with local changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git add &lt;file&gt;
</span><span class='line'>git commit
</span><span class='line'>git checkout master
</span><span class='line'>git pull origin master
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git rebase master
</span><span class='line'># Resolve conflicts
</span><span class='line'>git rebase --continue
</span><span class='line'># Roll back your commit
</span><span class='line'>git reset HEAD~1</span></code></pre></td></tr></table></div></figure>


<p>Better:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git stash
</span><span class='line'>git checkout master
</span><span class='line'>git pull origin master
</span><span class='line'>git checkout &lt;branch&gt;
</span><span class='line'>git rebase master
</span><span class='line'>git stash pop</span></code></pre></td></tr></table></div></figure>


<h3>Merging multiple branches</h3>

<pre><code>Branch 2
|
Branch 1 (committed)
|
master
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit
</span><span class='line'>git checkout branch1
</span><span class='line'>git merge branch2
</span><span class='line'># Pick one commit and stash the other, then edit aggregate comment for both commits from the previous branch1 and branch2 comments
</span><span class='line'>git rebase -i master
</span><span class='line'>git co master
</span><span class='line'># Merge aggregate commits into master
</span><span class='line'>git merge branch1
</span><span class='line'># Should see aggregate comment
</span><span class='line'>git log</span></code></pre></td></tr></table></div></figure>


<h3>Tag</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Check out a tag
</span><span class='line'>git checkout 2011-09-16
</span><span class='line'># Make sure your local master contains EXACTLY what you want tagged -- "git log" to double check
</span><span class='line'>git checkout master
</span><span class='line'># Create a tag
</span><span class='line'>git tag -a "tag name"
</span><span class='line'># This removes the tag from your local master
</span><span class='line'>git tag -d "tag name"
</span><span class='line'># DANGER - the colon tells git to DELETE something -- without a confirm prompt ! -- here, we're deleting the remote master's tag
</span><span class='line'>git push origin :"tag name"
</span><span class='line'># This creates the tag on your local master
</span><span class='line'>git tag "tag name"
</span><span class='line'># This pushes the new tag back onto remote master
</span><span class='line'>git push --tags
</span><span class='line'># List tags
</span><span class='line'>git tag
</span><span class='line'># Fetch all tags
</span><span class='line'>git fetch --tags</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sports I would watch]]></title>
    <link href="http://dinhyen.github.io/blog/2014/02/07/sports-i-would-watch/"/>
    <updated>2014-02-07T10:07:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2014/02/07/sports-i-would-watch</id>
    <content type="html"><![CDATA[<p>&hellip;if I had an unlimited amount of free time, bathroom breaks and no desire to have a life.</p>

<ol>
<li>Olympic men&rsquo;s hockey</li>
<li>Bruins hockey</li>
<li>NHL hockey</li>
<li>IIHF tournament hockey such as the World Juniors</li>
<li>Top-flight European professional hockey (KHL, Swedish Elite League, Finnish Elite League)</li>
<li>Olympic women&rsquo;s hockey. It&rsquo;s enjoyable but less exciting than the men&rsquo;s game due to the lack of strong competition; basically it&rsquo;s a 2-horse race between Canada and USA. Also there&rsquo;s no checking and it&rsquo;s slower.</li>
<li>College hockey</li>
<li>AHL hockey</li>
<li>High school hockey</li>
<li>Tour de France</li>
<li>Other Summer and Winter Olympic sports</li>
<li>Bandy. I&rsquo;ve never seen this Swedish specialty, but this hockey-soccer hybrid is tantalizing. Putting the players on skates is one way to make soccer more exciting.</li>
<li>Pick-up hockey in a rink or on a pond</li>
<li>Roller hockey</li>
<li>Canadian shinny</li>
<li>European indoor roller hockey.  They play on rollerskates.  Seriously.  I&rsquo;ve only seen it a few times.  It&rsquo;s exciting and weird.</li>
<li>Figure skating</li>
<li>Midget/Bantam/Squirt/Mite hockey.  Midget is an official youth hockey designation, it doesn&rsquo;t mean the game is played by midgets, Borderlands-style.</li>
<li>Midget hockey, Borderlands-style</li>
<li>Street hockey</li>
<li>A couple of guys practicing with sticks and puck</li>
<li>Soccer</li>
<li>Volleyball (not beach)</li>
<li>Tennis</li>
</ol>


<p>&hellip; and many sports later</p>

<p>Football<br/>
Basketball<br/>
Baseball</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Angular root scope for communication between controllers]]></title>
    <link href="http://dinhyen.github.io/blog/2013/12/07/using-angular-root-scope-for-communication-between-controllers/"/>
    <updated>2013-12-07T13:28:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2013/12/07/using-angular-root-scope-for-communication-between-controllers</id>
    <content type="html"><![CDATA[<p>Angular makes it simple to create standard index and details views.  Using the ubiquitous task list as an example, I can set up routes using the <code>$route</code> service as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$routeProvider</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/tasks&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;_tasks.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;TasksIndexCtrl&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/task/:id&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;_task.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;TaskDetailsCtrl&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span> <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/tasks&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The routes definitions specify the Angular controller and HTML template to use when the user navigates to a particular path.  Here we have 2 controllers, one for the index page and one for the details page.</p>

<p>The index controller retrieves the task list as a JSON array via the <code>$http</code> service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;tasks.json&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The index view renders each task with a link which embeds the task&rsquo;s id.  When clicked, the link redirects to the task&rsquo;s details view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;#/task/{{task.id}}&#39;</span><span class="nt">&gt;</span>{{task.name}}<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The details controller also retrieves task data as JSON via <code>$http</code>, after extracting the id value from <code>$routeParams</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$routeParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;task-&#39;</span> <span class="o">+</span> <span class="nx">$routeParams</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;.json&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">task</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/CzbeallomRCE4HuVWtzO/preview" target="_blank">View the first version in Plunker</a></p>

<p>So far it&rsquo;s pretty run-of-the-mill.  But let&rsquo;s say the task list also contains sufficient data to show each task&rsquo;s details (the index page simply displays fewer information due to space constraint).  There&rsquo;d be no need for a separate request to pull data for the details page.  The details controller can just search in-memory, within the task list which is already retrieved.  However, since each controller has its own scope and can&rsquo;t access another&rsquo;s scope, there has to be another way to share data between controllers.</p>

<p>Enters the <a href="http://docs.angularjs.org/guide/scope">root scope</a>, which acts as the parent scope for all other scopes.  If a property can&rsquo;t be found in a scope, Angular searchs its parent scope and so on until it reaches the root scope (as a consequence of prototypical inheritance).  Putting the task list in the root scope would allow Angular to find it in the index controller and, because all scopes share the same root scope, also allow the details controller to access it.</p>

<p>Modifying the index controller to save the task list to the root scope:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;tasks.json&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of making an HTTP request, the details controller can search for a task by id within the root scope.  When it finds the tasks, it saves it to its own scope.  It&rsquo;s probably a good idea to not pollute the root scope any more than necessary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">$routeParams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">getTask</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">id</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">task</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">task</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">task</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">task</span> <span class="o">=</span> <span class="nx">getTask</span><span class="p">(</span><span class="nx">$routeParams</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each time the user returns to the index page, a fresh request is made to retrieve the task list.  I could optimize it further by retrieving the task list only if it has changed.  To do so, I&rsquo;d need to keep track of the modification time.  Here, I&rsquo;m only making the simple check to see whether the task list has already been populated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;tasks.json&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span>
</span><span class='line'>      <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/BwEtA3Ftp9SJ0OJCPHyv/preview" target="_blank">View the second version in Plunker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating SQL Server Primary Key]]></title>
    <link href="http://dinhyen.github.io/blog/2013/11/23/updating-sql-server-primary-key/"/>
    <updated>2013-11-23T16:34:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2013/11/23/updating-sql-server-primary-key</id>
    <content type="html"><![CDATA[<p>A requirement recently came up to update the primary key of a SQL Server table.  We get user data from a third-party single sign-on service and store them locally.  When the SSO software was upgraded, user IDs were changed, so we need to update our local users but retain existing data.  I suppose one way to do so would be to drop any existing foreign-key constraint and update all related tables.  Unfortunately, the User table is related to practically every other table in the schema. Updating a bunch tables manually, without the safety net of relational integrity, would be a bit dodgy. Fortunately, there&rsquo;s a less painful approach using the <a href="http://technet.microsoft.com/en-us/library/ms186973.aspx">ON UPDATE CASCADE</a> clause.</p>

<p>In a simple example, I have a LineItem table, whose <code>userId</code> field references User&rsquo;s <code>Id</code> field. Since the existing FK relationship doesn&rsquo;t have ON DELETE CASCADE, I&rsquo;d have to &ldquo;alter&rdquo; the constraint to add it.  But because is no &ldquo;alter contraint&rdquo; in T-SQL, I&rsquo;d have to drop and re-add the constraint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="cm">/* drop existing constraint */</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">LineItem</span><span class="p">]</span> <span class="k">DROP</span> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_LineItem_User</span><span class="p">]</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* add constraint */</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">LineItem</span><span class="p">]</span>  <span class="k">WITH</span> <span class="k">CHECK</span> <span class="k">ADD</span>  <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_LineItem_User</span><span class="p">]</span> <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">([</span><span class="n">UserId</span><span class="p">])</span>
</span><span class='line'><span class="k">REFERENCES</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="k">User</span><span class="p">]</span> <span class="p">([</span><span class="n">Id</span><span class="p">])</span>
</span><span class='line'><span class="k">ON</span> <span class="k">UPDATE</span> <span class="k">CASCADE</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">LineItem</span><span class="p">]</span> <span class="k">CHECK</span> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_LineItem_User</span><span class="p">]</span>
</span><span class='line'><span class="k">GO</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Thereafter when I update an Id in the User table, the change would be cascaded to LineItem and all other related tables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 10 archive]]></title>
    <link href="http://dinhyen.github.io/blog/2013/11/19/top-10-archive/"/>
    <updated>2013-11-19T00:00:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2013/11/19/top-10-archive</id>
    <content type="html"><![CDATA[<p>A long time ago, before I settled into a comfortable life in suburbia and write dry articles about computer, I was in grad school and belonged to a student association. Yes, that sounds much more exciting.  But we had lots of gatherings, movie nights, BBQ, parties, in general lots of opportunities to revel in our collective nerddom.  When I moved out with roommmates, we indulged in more of the same.  I loved top 10 lists and always had one for most of the events.  Here are of the top 10 lists over the years, scraped from old emails.  Most probably won&rsquo;t make any sense without some context.  But they may be worth a chuckle or two for those who were named, or were unfortunately enough to be at those events.</p>

<p>Top 10 Reasons to go to the Star Wars party at Tan&rsquo;s</p>

<ol>
<li>Tan needs friends.</li>
<li>It behooves you to test your Star Wars knowledge against the best.</li>
<li>At long last, our &lsquo;96 Star Wars skit will begin to make some sense.</li>
<li>Tan&rsquo;s place and Yen&rsquo;s cooking sure beat Yen&rsquo;s place and Tan&rsquo;s cooking.</li>
<li>Help Tan finish up those jars and jars of lychee jelly.</li>
<li>Tan promised no Cajun Vietnamese food.</li>
<li>Experience the spectacle of Tan&rsquo;s room in person, in case you missed
it on The X-Files.</li>
<li>Experience Yen&rsquo;s cooking in person, in case you missed it on FOX&rsquo;s
World&rsquo;s Most Dangerous Stunts.</li>
<li>Tan will give a tour of his closet full of dresses, sorry outfit.</li>
<li>Find out what Obi Wan means by &ldquo;a most wretched hive of scum and
villainy&rdquo;.</li>
</ol>


<p>Top 10 reasons why you should go to the VSA party at McCormick&rsquo;s</p>

<ol>
<li>None of us will be cooking</li>
<li>No weird guys trying to put a move on you/your sibling</li>
<li>DJ recently lost CDRs containing his disco collection :(</li>
<li>Get a good laugh out of VSA guys trying bust a move</li>
<li>Betty will bring her Spice Girl/&lsquo;N Sync/Backstreet Boys albums</li>
<li>Help Yen feel better about splurging much $$ for the system</li>
<li>If the music sux and the crowd is boring, well at least it&rsquo;s better than your 8.01 problem set.</li>
<li>David will show off his break-dancing skills</li>
<li>Nothing good on MIT cable</li>
<li>We love you guys!</li>
</ol>


<p>Top 10 reasons our team will win&hellip;
VSA volleyball match</p>

<ol>
<li>Betty can really spank&hellip; the ball</li>
<li>Tan is the funniest thing you&rsquo;ve ever seen.  Hey, it distracts the other team.</li>
<li>Binh&rsquo;s jump serve can really knock the net off the post</li>
<li>Anh Hien&rsquo;s no-look pass, which leads to&hellip;</li>
<li>Yen&rsquo;s nothing but net shot</li>
<li>Our Pokemon-in-the-hole, be Nguyet</li>
<li>Van&rsquo;s exquisite drop shot</li>
<li>We&rsquo;re gonna try some of the mind-bending tricks we learn in the Matrix</li>
<li>Binh has a strong incentive: if we win, he won&rsquo;t have to dress up as a
girl for Senior Dinner.</li>
<li>The rest of us has a strong incentive: If we lose, we&rsquo;ll have to watch Binh&hellip;</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD TO GO THE PARTY</p>

<ol>
<li>Tan still needs friends</li>
<li>After this you won&rsquo;t have to see the graduates ever again</li>
<li>Be the first to put Tan&rsquo;s kitchen to good use</li>
<li>Tan promised he&rsquo;d spend half a week cleaning the house before we even set foot there</li>
<li>Tan&rsquo;s living room: the only one equipped with a pingpong table</li>
<li>We need fresh meat for multiplayer N64</li>
<li>We made Binh promise he won&rsquo;t go anywhere near the kitchen</li>
<li>Yen finally learned to decipher Betty&rsquo;s recipe (e.g., half a tablespoon, not <em>cup</em>, of salt)</li>
<li>We know you love to eat</li>
<li>Food will be catered by the Iron Chefs!</li>
</ol>


<p>Top 10 Reasons you should go to Yen&rsquo;s  House-warming party at 7 Seckel Street</p>

<ol>
<li>Listed by the Boston Phoenix as one of the hottest spots in Cambridge.</li>
<li>Will never be sold out like Crouching Tiger @ Kendall Cinema.</li>
<li>Plenty of seatings on the brand-new hardwood floor.</li>
<li>We&rsquo;ve had enough time to recover from Tan&rsquo;s cooking at last year&rsquo;s party.</li>
<li>If things get too slow, we&rsquo;ll go crash Diem&rsquo;s apartment just down the street.</li>
<li>TV will not pick up MIT Cable.</li>
<li>House does not have pingpong table nor N64 like Tan&rsquo;s, but will have something much better&hellip; me.</li>
<li>Landlord&rsquo;s dog will &ldquo;only bark, not bite&rdquo;.</li>
<li>Food will be catered by Iron Chef &ndash; Vietnamese</li>
<li>Be witness to a rare event that happens only once every millennium: Tan may bring a date!</li>
</ol>


<p>Top 10 reasons you should go to the July 4th BBQ at McCormick’s</p>

<ol>
<li>No need to fight for a piece of real estate with a zillion sweaty, smelly people.</li>
<li>Check out McCormick&rsquo;s sparkling new men&rsquo;s room (sorry ladies)</li>
<li>Beach volleyball!!!</li>
<li>We won&rsquo;t feel embarrassed by the Brazilians about our lack of rhythm</li>
<li>McCormick&rsquo;s reputation as MIT&rsquo;s party central</li>
<li>Weather should be hot enough that the chicken wings will cook themselves.</li>
<li>Pity the poor writhing masses below from our vantage point</li>
<li>Betty will bring her luau outfit, complete with lei, straw skirt and coconut half-shells (or is it Tan???)</li>
<li>Your personal fireworks show (&ldquo;Hey Betty, I didn&rsquo;t know these lighter fluids come in gallon cans?&rdquo; )</li>
<li>You&rsquo;ll be entertained</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME: Patriots Superbowl Game, Feb 1, 2003</p>

<ol>
<li>Big men in very tight tights</li>
<li>The Patriots cheerleaders</li>
<li>Experience the actions exploding out of our, uh, medium-screen TV</li>
<li>Leftover goodies from last week</li>
<li>If you don&rsquo;t know your false starts from your touchbacks, well you&rsquo;d know as much as most of this bunch :)</li>
<li>After this the next chance to party will be (drum roll please) President&rsquo;s Day!</li>
<li>This week won&rsquo;t be my turn to clean the house</li>
<li>Half-time show will feature Janet Jackson</li>
<li>Half-time show will not feature *NSYNC</li>
<li>Beracah promised no more BBB (Beracah&rsquo;s Burned Brownies)</li>
</ol>


<p>Top 10 reasons you should come: Thanksgiving party, Nov 27, 2003</p>

<ol>
<li>We just finished clearing up the mess from Halloween</li>
<li>Yen already put away his leather whip</li>
<li>The dreaded toilet paper-man will not be making an appearance</li>
<li>Yen will not be allowed in the kitchen while cooking is in progress</li>
<li>It&rsquo;s not Yen&rsquo;s turn this week to clean the house :)</li>
<li>We live across from McDonald&rsquo;s, if that becomes a necessity</li>
<li>We should be thankful that we&rsquo;re eating turkey instead of being in Turkey.. okay that was kinda lame</li>
<li>The more bodies, the warmer it is inside</li>
<li>This being East Cambridge, there are at least 3 liquor stores within a half-mile radius</li>
<li>This line intentionally left blank</li>
</ol>


<p>Top 10 Reasons you should come: Halloween Party, Oct 31, 2003</p>

<ol>
<li>Sebastian has been spending time in the gym to prepare for this event, for what we&rsquo;re afraid to ask.</li>
<li>Iva&rsquo;s &ldquo;spanking&rdquo; new leather outfit</li>
<li>Beracah wants to scare someone besides us</li>
<li>Yen just needs friends</li>
<li>You&rsquo;ve just spent a fortune on feather boas at the Garment District and want to show SOMEBODY</li>
<li>Our BLOOD-RED Chamber of Horror, mwahahaha</li>
<li>Our landlady doesn&rsquo;t live within earshot</li>
<li>Need you a reason to drink yourself silly?</li>
<li>Ergo, there&rsquo;ll be lots of drunk strangers in a darkened room&hellip; on second thought, let&rsquo;s not go there</li>
<li>It&rsquo;s Halloween, we need a good scare, and you&rsquo;re the best :)</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME to the BBQ: April 25, 2004</p>

<ol>
<li>Our chief meteorologist, Beracah&rsquo;s knee, informs us that Sunday should be more or less sunny</li>
<li>Our second-floor deck is finally all thawed out</li>
<li>The occupants are finally all thawed out</li>
<li>Our friendly neighborhood liquor stores sent us a reminder that we haven&rsquo;t visited them lately</li>
<li>In preparation for this event, Beracah has been abstaining from McDonald&rsquo;s</li>
<li>Yen hasn&rsquo;t had a chance to set anything on fire in a while</li>
<li>The fire department is just down the street</li>
<li>Iva would like to try out her new Gucci luau outfit</li>
<li>We haven&rsquo;t consumed vast quantities of alcohol in a month, and Sebastian is getting restless</li>
<li>No actual eyeball will be on the menu</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME: VSA Monthly Dinner Mar 13, 2004</p>

<ol>
<li>Yen is just providing the space and will not do any actual cooking</li>
<li>We made Tan promise that he would not cook</li>
<li>Since Nhut&rsquo;s SO lives in California, his sole hobby for the past few years has been
cooking and cooking some more</li>
<li>If worse comes to worst, there&rsquo;s a McDonald&rsquo;s across the street</li>
<li>East Cambridge has the cheapest liquor in town</li>
<li>With all the spare change we won from the Tet party we can finally afford to deck up the place a bit</li>
<li>The only thing green to be consumed will be the beer</li>
<li>Contrary to appearance our kitchen does not date from the Bronze Age</li>
<li>My roommates are quite normal people and will not try to eat you</li>
<li>St Patty&rsquo;s day party to follow!!!</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME: Saint Patrick&rsquo;s Day Party Mar 13, 2004</p>

<ol>
<li>No one showed up for our George Washington&rsquo;s Birthday party</li>
<li>We&rsquo;ll hide the extra rolls of TP so Beracah can&rsquo;t use them for his
costume again</li>
<li>Drinking green beer helps save water and demonstrate your environmental
sensitivity</li>
<li>Yen will not go as a Leprechaun (even though he&rsquo;s got the right height)</li>
<li>Iva&rsquo;s been practicing moves at flamenco and bellydancing shows</li>
<li>Test your drinking mettle against the best of East Cambridge, and I&rsquo;m not talking about
Yen, Iva or Beracah</li>
<li>We will not play any song from Sebastian&rsquo;s death-metal collection</li>
<li>Our neighbor seems to be hard-of-hearing</li>
<li>There&rsquo;ll be a bunch of drunk people wearing masks in a dark room&hellip; on second thought let&rsquo;s not go there</li>
<li>We&rsquo;ve got enough beads to cover (no pun intended) all of your Mardi Gras-style antics</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME TO THE BBQ
Sunday July 4, 2004</p>

<ol>
<li>Be first-hand witness to a rare event that only happens once in a lifetime: Iron Chef Polish vs. Iron Chef McDonald&rsquo;s</li>
<li>Our friendly neighborhood liquor store is offering discounts to frequent customers (or so Sebastian tells us)</li>
<li>This being our 4th BBQ, we have the grilling thing down to an art. Quit your snickering over there.</li>
<li>Since Iva is out of town, Sebastian will do his best to impersonate her with a coconut-shell luau outfit</li>
<li>Betty promises a preview of her Miss New England posedown. BYOO.</li>
<li>After &ldquo;Supersize me&rdquo;, Beracah no longer wants to eat hamburgers at McDonald&rsquo;s. Only at home.</li>
<li>The city of East Cambridge recently made us honorary Portuguese&hellip; meet Sebastiao, Beracaho and Tran</li>
<li>Fighting a zillion sweaty people for a piece of personal real estate is so much more entertaining on our balcony than on the Esplanade</li>
<li>It&rsquo;ll be safe, as aliens invaders have all been eradicated by Will Smith</li>
<li>No wardrobe malfunction anticipated at half-time show</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME:
Party September 25, 2004</p>

<ol>
<li>We&rsquo;re between-hurricanes</li>
<li>This week is official &ldquo;Imbibe-yourself-into-a-stupor&rdquo; week in East Cambidge</li>
<li>Our friendly neighborhood liquor store is having a going-out-of-business sale</li>
<li>There&rsquo;s no hockey on Saturday night (or this season)</li>
<li>Beracah spent the entire summer working on his no-lines tan</li>
<li>Betty is looking for volunteer &ldquo;oil-persons&rdquo; to help during her body-building competition</li>
<li>Last chance for Sebastian to try out his revealing summer outfit</li>
<li>Our amorous next-door neighbors asked if we could shake their bed with the subwoofer</li>
<li>Forget Miss America, Iva will show off her Miss East Cambridge catwalk routine</li>
<li>We have absolutely no good reason whatsoever</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME TO THANKSGIVING 2004 DINNER (NOV 24, 2004)</p>

<ol>
<li>If we said last Saturday was the last chance to see the real Nhut before he turns into California surfer dude&hellip; we lied!  THIS will be absolutely the last chance</li>
<li>We will be disclosing the censored photos from Betty&rsquo;s bodybuilding competition</li>
<li>Last chance to experience our cooking in person before the restraining order from Zagat arrives</li>
<li>We recently cleaned the living room and discovered all the missing cooking wares</li>
<li>Once in a life time chance to experience the curious and tempting possibilities of Vietnamese-Polish-Bulgarian fusion cuisine&hellip; after this, you may not want to again</li>
<li>The turkey we&rsquo;re about to consume came with a legitimate organ donor card</li>
<li>Beracah promised that he&rsquo;d continue to keep his &ldquo;secret&rdquo; recipe a secret</li>
<li>Meet my, ahem our, hot new roommate, Miss Betty Junior</li>
<li>Sebastian promised that he&rsquo;ll be sober while cooking</li>
<li>We&rsquo;ll make sure you won&rsquo;t be sober enough to think the food isn&rsquo;t great!</li>
</ol>


<p>SUPERBOWL 2005, FEB 6, 2005</p>

<ol>
<li>Last time we gathered to watch the Superbowl, they won!</li>
<li>Last year&rsquo;s Justin &amp; Janet brouhaha will be reenacted by Yen and his inflatable girlfriend</li>
<li>Have an imaginary housewarming party with an imaginary Betty (you can ask her to explain this one
:)</li>
<li>Catch the explosive actions out of our imaginary big-screen TV</li>
<li>The Pats cheerleaders will be cold, just like Beracah likes</li>
<li>For those not well versed in the intricacies of the sport, we will continue last year&rsquo;s lesson in football
rules and terminology. This week&rsquo;s topic: What &ldquo;tight end&rdquo; refers to instead of the player&rsquo;s physique.</li>
<li>It&rsquo;s a long, cold, dark winter night and we&rsquo;re scared</li>
<li>We&rsquo;d like to be reminded what you all look like</li>
<li>We&rsquo;ve still got some liquor left.  Come get some before Sebastian discovers it.</li>
<li>There&rsquo;s no point in watching the Michael Jackson trial cuz he&rsquo;s guilty :)</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME TO THE TET POTLUCK/MARDI GRAS PARTY
sat FEB 12, 2005</p>

<ol>
<li>Since this potluck is for Tet, there&rsquo;ll be plenty of luck and plenty of&hellip; pot. That didn&rsquo;t come out right.</li>
<li>Sebastian promises that the only dip he&rsquo;ll be making is for potato chips</li>
<li>We promise no leftover eggnogs</li>
<li>Our elderly next door neighbor is complaining that we haven&rsquo;t played any good gangsta rap lately</li>
<li>Since Michael Jackson cannot make an appearance due to certain, ahem, legal commitment, Beracah will do his best to impersonate the gloved one (on-stage, that is)</li>
<li>Sebastian recently uncovered scientific evidence that the best cure for the winter blues is to drink yourself into a stupor, or so he told us</li>
<li>Even though Yen doesn&rsquo;t own a six-pack, he plans to buy a few</li>
<li>Iva will preview her catwalk routine for the East Cambridge&rsquo;s Next Top Model audition</li>
<li>Help us trash the place so we can get on Queer Eyes for the Straight Guys</li>
<li>We&rsquo;ve lived in East Cambridge so long, we&rsquo;ve turned Brazilian. Pronto ao partido e começa quente em mim?</li>
</ol>


<p>TOP 11 REASONS YOU SHOULD COME TO THE JULY 4TH, 2005 PARTY</p>

<ol>
<li>Sebastian was recently elevated to Gold Member status at E Cambridge&rsquo;s very own Liquor-4-Everyone store and gets access to the best stuff</li>
<li>We have a visiting professional hiphop dancer from Flensburg, Germany, the capital of hiphop</li>
<li>Boston.sidewalk.com recently gave us a 9/10 for &ldquo;Hotspot You&rsquo;ve Never Heard of in a Place You&rsquo;d Never Go&rdquo;</li>
<li>Beracah has been practicing moves on Monday nights at a as-yet-unnamed club, where &ldquo;the guys are really good&rdquo;</li>
<li>Our place is certified by Mass Dept of Public Health as &ldquo;fit for grooving&rdquo;</li>
<li>The nice little old lady next door let us borrow her &ldquo;great-for-parties&rdquo; collection of gangsta rap</li>
<li>Yen recently broke up with his inflatable girlfriend, so&hellip; guys, she&rsquo;s available!</li>
<li>Iva will impart hot tips on how to strut like America&rsquo;s Next Top Model without breaking your ankles</li>
<li>Recent inquiry about dress code as to whether &ldquo;thongs are okay&rdquo; were voted 3-1, in favor of</li>
<li>Come celebrate Michael Jackson&rsquo;s complete acquittal! Sorry, there are no kids here.</li>
<li>The Queer Eyes for the Straight Guys have never been here</li>
</ol>


<p>Top 10 reasons you should come to the Year of the Dog Dinner Party:</p>

<ol>
<li>The year of the dog doesn&rsquo;t necessarily imply anything about the menu</li>
<li>Menu will be prepared by chefs with culinary degrees from the internet</li>
<li>If the menu doesn&rsquo;t work out, there&rsquo;s Banh Mi Ba Le across the street</li>
<li>There&rsquo;s enough alcoholic libations to keep a Polish guy happy</li>
<li>Kitchen is Swedish-themed, but fortunately the cuisine won&rsquo;t be</li>
<li>Cold weather means no guest will be tempted to come in thongs</li>
<li>Beracah would appreciate friendly faces to try out new pickup lines</li>
<li>Of all the hip spots in Dorchester, Fields Corner is the Hippest, according to FieldsCornerIsTheBest.com</li>
<li>Landlady lives on premise, but fortunately she&rsquo;s cool with parties</li>
<li>The chefs misplaced their vegetarian recipe book :)</li>
</ol>


<p>Top 10 reasons you should come to the July 4th BBQ:</p>

<ol>
<li>We&rsquo;ve had the urge to set something on fire since watching Xmen 3</li>
<li>Instead of fighting for a piece of personal real estate a zillion sweaty people on the Esplanade, you could be doing that on our patio</li>
<li>Lots of guys will be sporting 6-packs.  Beer, that is.</li>
<li>Recent inquiry about dress code as to whether &ldquo;thongs are okay&rdquo; were voted 3-1, in favor of</li>
<li>Balanced menu with sundry grilled options means that this will not simply be a sausage fest</li>
<li>Grilling will be expertly handled by chefs with culinary degrees from the Internet</li>
<li>The arcane secret of burning everything to a crisp has been lost since GrillMastah B left on vacation</li>
<li>Come celebrate Germany&rsquo;s recent victory in the world cup.  What, nobody cares about soccer?  Well, hmm, they do drink lots of beer in Germany.</li>
<li>We will light the BBQ with the electro-shock thingy on our R2-D2 unit</li>
<li>You&rsquo;re getting sick of eating health food</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME: Happy Turkey Day Gobble Gobble II (Nov 23, 2006)</p>

<ol>
<li>We seemed to have misplaced our favorite cookbook, 101 Ways to Prepare Tofu and Leeks</li>
<li>Getting here doesn&rsquo;t involve dodging illegal fireworks and avoiding domestic disturbance spilled onto the streets</li>
<li>Having lots of people over helps us save on heating cost</li>
<li>Menu will be prepared by chefs with culinary degrees from the Culinary Institute of the Internet</li>
<li>No easy access to liquor stores within 2 blocks as in E Cambridge, but hopefully Sebastian will come&hellip;</li>
<li>You seriously need a break from your daily diet of chocolate, coca-cola, buffalo wings, fried chicken, chicken pakora, a good steak, all at once.</li>
<li>Turkey is a staple of Vietnamese cuisine (pineapple turkey, lemon turkey, coconut turkey, pepper turkey, turkey stew, turkey salad, turkey and potatoes, you get the idea)</li>
<li>Boston.sidewalk.com gave us a 9/10 for &ldquo;Place You Should Go on Thanksgiving When There&rsquo;s Nowhere Else to Go&rdquo;</li>
<li>Roast a turkey in honor of the outgoing Republican senators and congressmen.</li>
<li>We miss you guys!</li>
</ol>


<p>Top 10 signs Ozgur may be a robot</p>

<ol>
<li>His favorite movies are Terminator, AI, and that Robin Williams movie.</li>
<li>He can talk really fast</li>
<li>He doesn’t need any sleep</li>
<li>He doesn’t eat all day long</li>
<li>“Ozgur Topcu” written backwards is “Ucpot Rugzo”, which of course in Turkish stands for “I Robot”</li>
<li>Robots have no use for bowls</li>
<li>He consumes vast quantities of coffee without any apparent effect</li>
<li>When he’s “talking to himself”, he’s actually holding a conversation with his computer</li>
<li>Have you ever seen him do the Robot?</li>
<li>He actually understands File-Up</li>
</ol>


<p>Top 10 Reasons To Come To Our New Year 2008 Party</p>

<ol>
<li>We finally finished the leftovers from Thanksgiving</li>
<li>You can go sledding down the slope in front of the lawn</li>
<li>Having people around helps cure SAD (Seasonal Anti-social Disorder)</li>
<li>No turkey, but we&rsquo;ll have a Turkish person</li>
<li>If the weather gets cold enough you can go ice skating in the backyard.</li>
<li>Crowding around our 13-inch TV helps keep you warm</li>
<li>Thanks to old age, you forgot when Christmas was and slept through it</li>
<li>One of your New Year&rsquo;s resolutions is &ldquo;spend more time in Arlington&rdquo;</li>
<li>This is the year of the rat, and the rat from Ratatouille will be doing the cooking</li>
<li>I know you covet the Star Trek chess set I got for Christmas.</li>
</ol>


<p>Lunch Crew 5/30/2008: Top 10 Reasons Why You Should &ldquo;Do The &lsquo;Crew&rdquo;</p>

<ol>
<li>Discover first-hand whether Silver Dust will work on werewolves</li>
<li>TS is running a very important study on how many SoftArtisans employees can fit around the peanut table</li>
<li>You love musical chairs</li>
<li>Dan may surprise us by wearing a non-Portugal or -Chelsea shirt.</li>
<li>You never know when Tim may forget that he ordered food and drop by</li>
<li>You are dying to find a killer recipe for Squirrel Stew and it&rsquo;s not on Wikipedia&hellip; yet.</li>
<li>Exercise your brain by participating in the weekly trivia game.  The weekly topic: Where in the world does Ozgur eat lunch?  (Hint: Starts with Crown and ends with Cafe)</li>
<li>The entertainment will involve thought-provoking questions such as, &ldquo;Does my half-eaten mozzarella sandwich belong to you&rdquo;?</li>
<li>You love Thai food and want to eat at Amarin every other week</li>
<li>It&rsquo;s too quiet upstairs and we need more conversations</li>
</ol>


<p>TOP 10 REASONS YOU SHOULD COME TO OUR JULY 4 2009 BBQ</p>

<ol>
<li>No tornadoes in the forecast</li>
<li>It&rsquo;ll be a nice sunny day because we performed an ancient Indian rain ritual and these things never work</li>
<li>No need to go down to the Esplanade&hellip;  plenty of hot and scantily clad people right here</li>
<li>Grillmaster has a PhD in culinary science from the Internet</li>
<li>Karaoke machine is broken&hellip;  intentionally.</li>
<li>You like juicy melons.  Watermelons, that is.</li>
<li>Fresh corn was on sale and we bought a few&hellip; hundreds</li>
<li>Wii wiill provide you wiith abundant wiine and wiitty entertainment.  Okay that was lame, but don&rsquo;t be such be a wiise-ass.</li>
<li>Beracah has honed to perfection a new force power possessed by no other Jedi or Sith master&mdash;Force Burn</li>
<li>Be the first to handle our virgin grill</li>
</ol>


<p>2010: TOP 10 REJECTED RETREAT RECOMMENDATIONS</p>

<ol>
<li>Sprints to include actual sprint on the river path</li>
<li>JIRA will now track amount of coffee consumed</li>
<li>Foster relationship with customers by taking them on fishing trips to the footbridge above the dam</li>
<li>To improve posture, desks should be removed and employees encouraged to type while in yoga pose</li>
<li>Bugs should be ranked by number of K-cups it would take to resolve</li>
<li>SA logo to be changed to unicorn dueling narwhal</li>
<li>Whenever there&rsquo;s an exception, SilverDust should play Pacman game instead of showing actual error message</li>
<li>Stand-up meetings taking too long, cutting into productivity.  Recommending stand-upside-down meetings, which should drastically cut down meeting duration due to severe fatigue.</li>
<li>To promote team identity, dev should wear hair in a pony tail, pre-sales Mohawk and TS the Ozgur-perm</li>
<li>Buy OfficeWriter and receive free autographed drawing of your pet, or random animal if you don&rsquo;t have one</li>
<li>Bug priority to be decided by result of foosball match</li>
<li>SilverDust error messages to be generated by Random Chuck Norris Fact generator</li>
</ol>


<p>2009: TOP 10 OVERHEARD QUOTES AT THE SHAREPOINT CONFERENCE IN LAS VEGAS</p>

<ol>
<li>I was working on DMH till 2am on purpose to prepare for this trip</li>
<li>Simply put SharePoint is the best product ever invented.  I would use it over and over again. It is pure joy to behold.  I&rsquo;m just so excited about SharePoint&hellip; What?  Of course you can quote me on that&hellip; My  name?  Ben Jones.</li>
<li>Is this the line for the poker tournament?</li>
<li>Is this the line for the buffet?</li>
<li>Just checking one last time.  Are you absolutely sure that what happens in Vegas stays in Vegas?</li>
<li>Just for this year, the show will start daily at 8pm and goes till 5 in the morning</li>
<li>Hey check it out, the water fountain dispenses booze!</li>
<li>So nobody remembers a thing about last night?  Oh, has anyone seen Jim?</li>
<li>People on the street are so friendly here.  They keep wanting to go back to my room to get to know me better.</li>
<li>I just hit the jackpot for $50 billion!  Unfortunately they told me that the slot machine was imported from Zimbabwe.</li>
<li>There&rsquo;s a tiger in the bathroom!</li>
<li>Why do people keep asking us for directions to the Stardust?</li>
<li>Wanna see the pictures from my wedding last night?</li>
</ol>


<p>2008: WHAT DID YOU LIKE ABOUT LAST YEAR&rsquo;S RETREAT?</p>

<p>Last year&rsquo;s retreat on Martha&rsquo;s Vineyard was a success. We figure that will try capture the spirit if not the formula of last year&rsquo;s retreat.  To get some ideas, we wrote down some of the quotes we overheard.  Disclaimer: The quote and/or ascription of speaker may be mostly to completely apocryphal.</p>

<p>&ldquo;Sitting by the shimmering pool in the soft moonlight, pouring our hearts out about life and relationship, proving that romanticism is very much alive. It reminds me of&hellip; oh never mind.&rdquo; &ndash; Andrey</p>

<p>&ldquo;Participating in a softball game is huge part of my immersion in American culture&mdash;it&rsquo;s so full of excitement and camaderie.  However, I found it strange that Americans would enjoy such a painful sport.&rdquo; &ndash; Tamar</p>

<p>&ldquo;I&rsquo;m proud of how everyone, when given a challenge, rose to the occasion and performed beyond their normal ability.  This year we doubled the beer and there was no problem whatsoever.&rdquo; &ndash; Dan</p>

<p>&ldquo;I don&rsquo;t know how I did it, but I think I just set off the alarm back at the office&rdquo; &ndash; George Sass</p>

<p>&ldquo;Um, the lobsters were great&rdquo; &ndash; Richard</p>

<p>&ldquo;I didn&rsquo;t think anyone can eat 5 lobsters until now&rdquo; &ndash; Ron</p>

<p>&ldquo;Stooping in a tiny kitchen with 25 other people, in a room intended for 2, reminds me of college. And just as in college, the free beer made it worth every bit of trouble.&rdquo; &ndash; Scott</p>

<p>&ldquo;RPI has parties? I mean, besides LAN parties&hellip;&rdquo; &ndash; George</p>

<p>&ldquo;Uh, I don&rsquo;t remember much. Just that I met someone cool at the bar. I think his name were Daniels&hellip; not Anthony, Jack. Jack Daniels.&rdquo; &ndash; Ozgur</p>

<p>&ldquo;Skinny-dipping in the pool&rdquo; &ndash; Anonymous</p>

<p>&ldquo;I was a little worried when my roommate Mark disappeared for half of the night&rdquo; &ndash; Yen</p>

<p>&ldquo;Everything from the setting to the activities were beyond my expectation.  I just wish my sweetie were here. We could have played all sort of casual fun games like tennis, bowling, boxing, you know.  We&rsquo;d have to hook her up to the TV first, of course.&rdquo; &ndash; Kevin</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So long WordPress, hello Octopress]]></title>
    <link href="http://dinhyen.github.io/blog/2013/11/18/so-long-wordpress-hello-octopress/"/>
    <updated>2013-11-18T00:00:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2013/11/18/so-long-wordpress-hello-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using WordPress since 2011.  It works well enough, but for me there are a few drawbacks.</p>

<ul>
<li><p>It&rsquo;s slow. It takes time to do anything from creating a post to previewing to deploying it.  I prefer to edit text in a proper text editor, with the full array of keyboard shortcuts, so I usually end up copying and pasting anyways.  But using the UI to do everything is cumbersome.  Of course I could install a local instance of WordPress so I can preview locally.  However, I would have to deploy everything, posts and images, every time. This seems inefficient for just adding a new post.</p></li>
<li><p>It&rsquo;s hard to backup.  I could export the WordPress content as an XML file, but this is only useful to WordPress.  For a full manual backup, I would use Control Panel to export the database, then FTP into the site and download the entire WordPress content folder as an archive.  This is time-consuming and a far cry from proper version control.</p></li>
<li><p>It&rsquo;s hard to customize.  There are probably a dozen plugins for anything I will ever want to do.  While I could view and edit the plugin source, without an easy way to test it&rsquo;s effectively a blackbox.  Further, I wouldn&rsquo;t want to have deal with PHP just to customize a plugin.</p></li>
</ul>


<p>So it&rsquo;s an easy to decision to put WordPress out to pasture.  I looked at Jekyll and deploying on Heroku. Jekyll seems like a good choice because it&rsquo;s used by GitHub, so it&rsquo;s more likely to be developed and less likely to go away.  I also checked out <a href="http://ruhoh.org">Ruhoh</a>, which is created by a Jekyll developer to address some of its shortcomings.  I really liked Ruhoh for the customizability, <a href="http://mustache.github.io">Mustache</a> markup syntax and incremental page generation.  I may go back to Ruhoh at some point.  I finally settled on Octopress.  It adds a theming engine and a host of productivity enhancements to Jekyll as well as beautiful syntax highlighting.  It makes it trivially simple to deploy to GitHub Pages.</p>

<p>There are many good articles written about using Octopress.  The <a href="http://octopress.org/docs">documentation</a>, for one, is a very good place to start.  Here are just some of the issues I ran into along the way.</p>

<h3>Importing from WordPress</h3>

<p>I used Jekyll&rsquo;s <a href="http://jekyllrb.com/docs/migrations">migration tools</a>, specifically <code>hpricot</code> to process a WordPress export XML file to generate posts and pages.  The process worked quite well, although as expected some manual cleanups were necessary.</p>

<h3>Setting up DNS</h3>

<p>This is probably a no-brainer for many people, unfortunately I&rsquo;m not among them.  Since my blog is now hosted by GitHub Pages, I had to configure my DNS to point my domain to the new IP address.  The process is quite clearly laid out in the <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">documentation</a>.  In my case, I had to create an <em>A record</em> for my top-level domain, <code>yentran.org</code>, to point to <code>204.232.175.78</code>.  I also created a CNAME record for the subdomain <code>www.yentran.org</code> as an alias which points to the same address.  I was concerned that my email address <code>xxx@yentran.org</code> would be broken.  It turns not to be the case.  Email forwarding relies on a MX record, which continues to point to my ISP&rsquo;s IP address.  There&rsquo;s also a wildcard record, which catches any unknown subdomain for which there is no matching A or CNAME record.</p>

<h3>Images</h3>

<p>Previously I used NextGen gallery to manage images.  NextGen stores images in separate folders, so it&rsquo;s simple to copy them (rather than searching for them on my hard drive).</p>

<p>I now use Dropbox&rsquo;s Public folder to host images.  This allows me to easily manage images.  In Lightroom (or any other image organizing software), I can export the images directly to Dropbox&rsquo;s local sync folder and the images immediately becomes available for linking.  If I want to modify images&mdash;such as resizing them&mdash;I can work directly with the Dropbox sync folder without having to make changes to the site.</p>

<h3>Image gallery</h3>

<p>I used Lightbox 2 jQuery plugin to display an image gallery.  However, it doesn&rsquo;t work with hotlinked images.  I decided to <a href="https://github.com/dinhyen/darkbox">roll my own</a>.</p>

<p>I wrote a small Ruby + <a href="http://whatisthor.com">Thor</a> utility to generate the necessary markup for images based on the Dropbox folder  and append it to posts.  Thor is awesome.</p>

<h3>Blogging with Octopress</h3>

<p>Everytime you add or modify a post or page, Jekyll regenerates the entire site.  This is so that it can properly update the site metadata.  However, this can take a long time, particularly if you have many posts and pages.  Octopress provides a useful optimization tool.  Type <code>rake isolate["post name"]</code> moves all other posts except the specified post into a _stash folder, so that regeneration is significantly faster.  Once you&rsquo;re done, type <code>rake integrate</code> to move the other posts back; just don&rsquo;t forget to do this before deploying.</p>

<h3>Categories</h3>

<p>Octopress doesn&rsquo;t provide an out-of-the-box way to display categories, but this can be easily done. I want display them as an aside (Octopress-speak for a sidebar plugin or partial).  I based mine on Octostrap3&rsquo;s <a href="http://kaworu.github.io/octopress/blog/2013/10/03/category-list-aside">Category List aside</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% for category in site.categories %}
</span><span class='line'>     {% capture category_url %}{{ site.category_dir }}/{{ category | first | slugize | downcase | replace:&#39; &#39;,&#39;-&#39; }}{% endcapture %}
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">data-category=</span><span class="s">&quot;{{ category | first }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url | append:&#39;/&#39; | append:category_url }}&quot;</span><span class="nt">&gt;</span>{{ category | first }}<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;em&gt;</span>{{ category | last | size }}<span class="nt">&lt;/em&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each category in the <code>site.categories</code> collection is an array, the first element being the category name and the last containing the pages in the category.  Unfortunately Jekyll&rsquo;s Liquid markup language doesn&rsquo;t have a way to sort a collection of arrays.  I opted to use JavaScript. This isn&rsquo;t ideal, but some of Octopress&rsquo;s own asides use the same approach.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">categories</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-category]&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">categories</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">categories</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="s1">&#39;data-category&#39;</span><span class="p">].</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="s1">&#39;data-category&#39;</span><span class="p">].</span><span class="nx">value</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'>          <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#categories&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">categories</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Breadcrumbs</h3>

<p>This would be another nice-to-have for Octopress.  There are a few solutions to display breadcrumbs using Liquid.  However, the more I work with Liquid, the less I like it.  I would much prefer Mustache.  So I again went with a JavaScript solution, which would still work if later on I decide to go with another blogging framework.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">breadcrumbs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url_parts</span><span class="p">,</span> <span class="nx">$html</span><span class="p">,</span> <span class="nx">$li</span><span class="p">,</span> <span class="nx">$content</span><span class="p">,</span> <span class="nx">href</span><span class="p">,</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">url</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">url_parts</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">grep</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/index\.html/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\//</span><span class="p">),</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">url_parts</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// if at the top level</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$html</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;ol class=&quot;breadcrumbs&quot;&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">url_parts</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">=</span> <span class="nx">url_parts</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">href</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">url_parts</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$content</span> <span class="o">=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">url_parts</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;a&gt;&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">:</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$content</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$html</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">$html</span><span class="p">.</span><span class="nx">insertAfter</span><span class="p">(</span><span class="s1">&#39;#breadcrumbs-js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">breadcrumbs</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the CSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.breadcrumbs</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-family</span><span class="o">:</span> <span class="n">PT</span> <span class="n">Sans</span><span class="o">,</span> <span class="n">helvetica</span><span class="o">,</span> <span class="k">sans-serif</span><span class="o">,</span> <span class="n">arial</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">30px</span> <span class="m">15px</span> <span class="m">0</span> <span class="m">55px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.breadcrumbs</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>  <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.breadcrumbs</span> <span class="nt">li</span><span class="nd">:not</span><span class="o">(</span><span class="nd">:last-child</span><span class="o">)</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.breadcrumbs</span> <span class="nt">li</span><span class="nd">:first-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c">/* Octopress classic theme */</span>
</span><span class='line'><span class="nf">#content</span> <span class="nc">.breadcrumbs</span> <span class="o">+</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#content</span> <span class="nc">.breadcrumbs</span> <span class="o">+</span> <span class="nt">div</span> <span class="o">&gt;</span> <span class="nt">article</span> <span class="o">&gt;</span> <span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding-top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created a partial consisting of the JavaScript and the necessary CSS, then included it in the <code>pages.html</code> layout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">render_partial</span> <span class="n">_includes</span><span class="o">/</span><span class="n">custom</span><span class="o">/</span><span class="n">breadcrumbs</span><span class="o">.</span><span class="n">html</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Navigation</h3>

<p>On my <a href="http://dinhyen.github.io/travel">travel pages</a>, I want to have a hierarchy of links to different destinations:</p>

<pre><code>USA
  Arizona
    Grand Canyon National Park
  Florida
    Cape Canaveral
</code></pre>

<p>It should be set up so that if I add a new destination, I wouldn&rsquo;t have to hunt down all the pages containing the links in order add a new one.  Luckily, with Jekyll all of the site&rsquo;s metadata is stored in a single YAML file and accessible through the <code>site</code> variable.  In order to capture the navigation hierarchy, I added the following to <code>_config.yml</code>:</p>

<pre><code>travel:
  usa:
    - name: "Arizona"
      url:  az
      places:
        - name: "Grand Canyon National Park"
          url:  grand-canyon-national-park
    - name: "Florida"
      url:  fl
      places:
        - name: "Cape Canaveral"
          url:  cape-canaveral
</code></pre>

<p><a href="http://www.yaml.org">YAML</a> is a really compact, highly readable format.  In the block above, indentation denotes nesting, <code>:</code> denotes a key-value pair and <code>-</code> denotes a collection.  The parser turns the above YAML into the following hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;travel&quot;</span> <span class="o">=&gt;</span> <span class="err">{</span>
</span><span class='line'>    <span class="s2">&quot;usa&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>      <span class="err">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Arizona&quot;</span><span class="o">,</span> <span class="s2">&quot;url&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;az&quot;</span><span class="o">,</span> <span class="s2">&quot;places&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>          <span class="err">{</span><span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Grand Canyon National Park&quot;</span><span class="o">,</span> <span class="s2">&quot;url&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;grand-canyon-national-park&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="err">}</span><span class="o">,</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Florida&quot;</span><span class="o">,</span> <span class="s2">&quot;url&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;fl&quot;</span><span class="o">,</span> <span class="s2">&quot;places&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>          <span class="err">{</span><span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Cape Canaveral&quot;</span><span class="o">,</span> <span class="s2">&quot;url&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;cape-canaveral&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After making modifications to <code>_config.yml</code>, I could quickly examine them by firing up the interactive Ruby shell, <code>irb</code>, then typing the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nt">site</span> <span class="o">=</span> <span class="nt">YAML</span><span class="nc">.load_file</span><span class="o">(</span><span class="s1">&#39;_config.yml&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can access the navigation metadata as follows:</p>

<ul>
<li><code>site["travel"]</code> returns a hash containing country objects</li>
<li><code>site["travel"]["usa"]</code> returns an array of state objects</li>
<li><code>site["travel"]["usa"][0]</code> returns the first element of the array, which is Arizona</li>
<li><code>site["travel"]["usa"][0]["name"]</code> returns the text &ldquo;Arizona&rdquo; and <code>site["travel"]["usa"][0]["url"]</code> the corresponding URL</li>
<li><code>site["travel"]["usa"][0]["places"]</code> returns an array of locations in Arizona</li>
<li><code>site["travel"]["usa"][0]["places"][0]</code> returns the object for Grand Canyon National Park, and so on</li>
</ul>


<p>Jekyll makes it even nicer to work with the hash by turning keys into instance methods.  So instead of writing <code>site["travel"]["usa"][0]["places"][0]</code>, I could also write <code>site.travel.usa[0].places[0]</code>.</p>

<p>In order to generate the following HTML for the navigation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/travel/usa&quot;</span><span class="nt">&gt;</span>USA<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/travel/usa/az&quot;</span><span class="nt">&gt;</span>Arizona<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/travel/usa/az/grand-canyon-national-park&quot;</span><span class="nt">&gt;</span>Grand Canyon National Park<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/travel/usa/fl&quot;</span><span class="nt">&gt;</span>Florida<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/travel/usa/fl/cape-canaveral&quot;</span><span class="nt">&gt;</span>Cape Canaveral<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used the following Liquid code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/travel/usa&quot;</span><span class="nt">&gt;</span>USA<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      {% for state in site.travel.usa %}
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/travel/usa/{{ state.url }}&quot;</span><span class="nt">&gt;</span>{{ state.name }}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>            {% for place in state.places %}
</span><span class='line'>              <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/travel/usa/{{ state.url }}/{{ place.url }}&quot;</span><span class="nt">&gt;</span>{{ place.name }}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            {% endfor %}
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I want to add another destination, I&rsquo;d only have to modify the YAML.</p>

<h3>Conclusion</h3>

<p>Octopress/Jekyll makes it easy and fun to tweak, hack and do so efficiently. I only wish I&rsquo;d made the switch earlier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sigma 50mm f/1.4 lens for Nikon AF]]></title>
    <link href="http://dinhyen.github.io/blog/2013/11/13/sigma-50mm-lens/"/>
    <updated>2013-11-13T00:00:00-05:00</updated>
    <id>http://dinhyen.github.io/blog/2013/11/13/sigma-50mm-lens</id>
    <content type="html"><![CDATA[<p>I&rsquo;m fond of landscape photography.  However when there&rsquo;s a human subject, applying the same kind of composition can come out looking too formal or posed.  I&rsquo;d like to achieve more of the natural, spontaneous, spur-of-the-moment feel.  For that I want to have a lens that&rsquo;s fast, focuses quickly and has good bokeh.  A prime lens would have those qualities at a much lower price point than a telephoto lens.  With that settled, I had to decide between 35, 50 and 85mm.  From what I&rsquo;ve read, the general opinion is that the wide-angle 35mm prime lens is good for landscape or street scenes, while 85mm is good for an intimate, close-up portrait.  That leaves the 50mm, which can do either almost as well and happens to be the (only) lens on my first camera, a <a href="http://en.wikipedia.org/wiki/Canon_AT-1">Canon AT-1</a>.  That it&rsquo;s famously associated with Henri Cartier-Bresson can&rsquo;t be a bad thing either.</p>

<p>Nikon offers two 50mm lenses at f/1.4 and f/1.8.  I chose the Sigma 50mm f/1.4 over the Nikon counterparts. For one, the reviews for the Sigma are universally outstanding.  Even though bokeh quality is somewhat subjective, the general consensus is that the Sigma is better. For almost the same price as the Nikon 50mm f/1.4, it looks and feels much more solid than the plasticky-looking Nikon equivalent. Furthermore, it has the professional-standard 77mm filter size instead of the 58mm and 52mm filter sizes for the Nikon lenses.</p>

<p>The Sigma is very solid with a nice heft. It&rsquo;s plastic, but manages to feel upscale and not cheap.  It comes with a canvas pouch, a lens hood and a lens cover. It&rsquo;s made in Japan, which is nice for a lens at this price range.  Even my much more expensive Nikon 24-120mm f/4 zoom is made in Thailand.  Strangely, there&rsquo;s no marker on the lens to line up with the camera body, so I had to fiddle around a bit to get it to screw in.</p>

<p>Now onto the test images. All photos are taken with a Nikon D600 in either aperture priority or manual mode with auto ISO sensitivity. The first shoot is a walkaround our neighborhood.</p>

<p>This is a rather clich&eacute; shot.  The subject is flat so all of it can be in focus. I thought the sharpness is very good.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5105.jpg" />
<figcaption>Exposure 1/1000 @ f/1.8, 100 ISO</figcaption>
</figure>


<p>Here Kate is inspecting our walkway. In daylight the lens focuses easily. I think focusing works best at this distance.  Depth of field is good with the lens wide open and so is bokeh. The 50mm focal length is perfect for portraits that include the upper body or shoulder.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5096.jpg" />
<figcaption>Exposure 1/1250 @ f/1.8, 100 ISO</figcaption>
</figure>


<p>I love this shot, and not just because of the subject.  Because of the closeness, I had to stop down the aperture a bit while focusing on the eyes.  Otherwise the other parts of the face would be out of focus.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5059.jpg" />
<figcaption>Exposure 1/50 @ f/5, 1800 ISO</figcaption>
</figure>


<p>The second shoot was at a ballroom competition at Tufts University where my friends were competing. Here I put the D600 in continuous servo AF mode with 9 focusing points.  I shot in manual mode with the shutter speed set at a sufficiently high value to prevent blurring. I also <a href="http://www.luminescentphoto.com/blog/2010/11/05/nikon-af-on-technique">set the AE/AL button to AF-on</a> so that shutter release button just, well, release.</p>

<p>This is a rather flashy couple that clearly dominated the rest of the field.  They were quite adept at showmanship.  Not surprisingly, they took first place.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5164.jpg" />
<figcaption>Exposure 1/400 @ f/2.2, 720 ISO</figcaption>
</figure>


<p>Here they are practicing in the corridor above the main floor.  The setting is very nice, as is the photogenic couple. This has almost an Instagram feel to it.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5335.jpg" />
<figcaption>Exposure 1/400 @ f/1.8, 3200 ISO</figcaption>
</figure>


<p>This is at the maximum aperture.  Again sharpness is excellent at a range of about 3m.  I had several long-distance shots from around 20-40m with continuous servo AF that didn&rsquo;t turn out very good.  The subject was blurry while the background was in sharper focus. Either the autofocus wasn&rsquo;t working well, or I just didn&rsquo;t have the right setting.  I switched from 9- to 21-point focusing mode and got somewhat better results.  In general I think this lens suits close-ups better.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5377.jpg" />
<figcaption>Exposure 1/400 @ f/1.4, 2800 ISO</figcaption>
</figure>


<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5312.jpg" />
<figcaption>Exposure 400 @ f/2.2, 3200 ISO</figcaption>
</figure>


<p>The last shoot is at a friend&rsquo;s house. I had to use continuous focusing again because the subject was rather, ahem, mobile.  Some shots turned out quite blurry even with high shutter speed.  I&rsquo;ll have to look into this more.  This shows the nice subject isolation possible with the ridiculously large aperture.</p>

<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5737.jpg" />
<figcaption>Exposure 1/60 @ f/1.4, 450 ISO</figcaption>
</figure>




<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_5938.jpg" />
<figcaption>Exposure 1/160 @ f/2.2, 3200 ISO</figcaption>
</figure>




<figure>
<img src="https://dl.dropboxusercontent.com/u/52804626/sigma-50mm/dsc_6000.jpg" />
<figcaption>Exposure 1/160 @ f/2.2, 2800 ISO</figcaption>
</figure>


<p>In conclusion, I love this lens! I like the ability to just point and shoot without worrying too much about composition.  Being so used to carefully composing a shot, I&rsquo;ve had to resist that impulse a bit and just focus on capturing the moment as it happens.  The results look and feel natural and effortless.   Needless to say this lens will get a lot more work in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Windows Media Center No Tuner Available Error With HDHomeRun Prime]]></title>
    <link href="http://dinhyen.github.io/blog/2013/11/02/fixing-windows-media-center-no-tuner-available-error-with-hdhomerun-prime/"/>
    <updated>2013-11-02T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/11/02/fixing-windows-media-center-no-tuner-available-error-with-hdhomerun-prime</id>
    <content type="html"><![CDATA[<p>I have the HDHomeRun Prime network tuner.  Recently, after a Verizon FiOS tech rebooted the ONT to fix a network issue, I got the dreaded <code>Viewing or Listening Conflict. No tuner available to satisfy the current request</code> error when trying to view Live TV in Windows Media Center.  When I tried Settings > Windows Media Center setup, I got the error:</p>

<blockquote><p>Tuner Not found. The TV signal cannot be configured because a TV tuner was not detected. If you have a tuner, ensure it is installed correctly.  To find out how to watch TV on your PC, visit <a href="http://www.windows.com/pctv.">http://www.windows.com/pctv.</a></p></blockquote>

<p>Since I was able to view cable TV using the bundled Quick TV application, the tuners seemed to be working properly. I tried upgrading the SiliconDust software, re-installing PlayReady for WMC, rebooting the router, turning off the Windows Firewall, none of which made any difference.  I opened the Services panel and verified that the Windows Medica Center Receiver Service and the HDHomeRun Service are started.</p>

<p>All this resulted in lost time and furthered the perception that MS just can&rsquo;t seem to make simple tasks as effortless as Apple.  Finally I figured it out &mdash; Network Discovery had to be turned on.  I&rsquo;m not sure why it was turned off in the first place, but it had to be running for WMC to detect the tuners.</p>

<p>Simply open Windows Explorer and select the Network tab in the sidebar.  You should see the HDHomerun Live DRIxxxx devices under the Media Devices section.  If you don&rsquo;t, Windows will ask if you want to turn on Network Discovery.  Do this.  If you&rsquo;re lucky, once you&rsquo;ll have done this WMC will immediately detect the tuner and you&rsquo;re done. Otherwise, you can turn on Network Discovery in the Network and Sharing Center > Advanced sharing settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helper method to generate nested tags from block]]></title>
    <link href="http://dinhyen.github.io/blog/2013/10/31/helper-method-generate-nested-tags-from-block/"/>
    <updated>2013-10-31T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/10/31/helper-method-generate-nested-tags-from-block</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still pretty new to Ruby. Hopefully one day I&rsquo;ll know enough to be able to look back and slap myself on the forehead for struggling with these issues.</p>

<p>Right now our views generate a menu from a simple set of links:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d like to convert them to a drop-down menu that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;div class=&quot;dropdown&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;a class=&quot;dropdown-toggle&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;caret&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="x">  &lt;ul class=&quot;dropdown-menu&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt; </span>
</span><span class='line'><span class="x">    &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d like to minimize the changes to the markup as much as possible.  Initially I tried using a partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;!-- /shared/_dropdown.html.erb --&gt;</span>
</span><span class='line'><span class="x">&lt;div class=&quot;dropdown&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;a class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;caret&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="x">  &lt;ul class=&quot;dropdown-menu&quot;&gt;</span>
</span><span class='line'><span class="x">    &lt;li&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/li&gt;</span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view would then include the partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="ss">:layout</span> <span class="o">=&gt;</span> <span class="s2">&quot;shared/dropdown&quot;</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;bar, &quot;</span><span class="c1">#&quot; </span><span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this put both links inside a single <code>&lt;li&gt;</code> tag.  It looked fine with some CSS styles, but not generating the proper markup bothered me a bit.  So I tried using a helper method which should offer some more flexibility.  The helper method would be taking a block, decompose it into individual anchor tags and and wrap them in the proper markup.</p>

<p>I started off with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">dropdown</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">content</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>capture</code> helper method captures the block and stores it in a variable that I can process. More importantly, it also works for strings within the block.  This is <a href="http://blog.agile-pandas.com/2011/01/13/rails-capture-vs-with-output-buffer">an important distinction</a> between <code>capture</code> and a similar helper method, <code>with_output_buffer</code>.</p>

<p>If the block is empty, there is nothing to do. Otherwise, I&rsquo;d turn them into links.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">content</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">anchors</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">empty?</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">anchors</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate the top-level div is pretty straight-forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;dropdown&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this were in a view, I could just merrily include other content_tags in the block argument.  However, in a helper mehod, the content is stored inside an output buffer.  I would have to use <code>concat</code> to add it to the output buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">concat</span> <span class="n">link_to</span><span class="p">(</span><span class="n">content_tag</span><span class="p">(</span><span class="ss">:i</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;caret&quot;</span><span class="p">),</span> <span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown-toggle&quot;</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:toggle</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown&quot;</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next I wanted to add a <code>ul</code> tag and pass its content inside a block. I would also have to use <code>concat</code> as before.  In my initial attempt, I tried to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">concat</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:ul</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;dropdown-menu&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resulted in a syntax error. The <code>content_tag</code> is correctly treated as the first argument to <code>concat</code>.  However because of Ruby&rsquo;s order of precedence, the block is intepreted as belonging to <code>concat</code>, not <code>content_tag</code> as intended.  To be able to use <code>concat</code> with the <code>do..end</code> syntax, I would have to wrap <code>concat</code>&rsquo;s arguments inside parentheses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">concat</span><span class="p">(</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:ul</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;dropdown-menu&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looked quirky and not very ruby-ish.  Fortunately, it turned out that the other block syntax using curly braces has higher precedence than <code>do..end</code> (<a href="http://stackoverflow.com/questions/2122380/using-do-block-vs-brackets?lq=1">source</a>).  This let me eliminate the redundant parentheses:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">concat</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:ul</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown-menu&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the links were added inside <code>li</code> tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">anchors</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">concat</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:li</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">html_safe</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the full method which turned out to be quite short:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">dropdown</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">content</span> <span class="o">=</span> <span class="n">capture</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">anchors</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n/</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">anchors</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">concat</span> <span class="n">link_to</span><span class="p">(</span><span class="n">content_tag</span><span class="p">(</span><span class="ss">:i</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;icon-caret&quot;</span><span class="p">),</span> <span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown-toggle </span><span class="si">#{</span><span class="n">toggleClass</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:toggle</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown&quot;</span> <span class="p">})</span>
</span><span class='line'>      <span class="n">concat</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:ul</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;dropdown-menu&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">anchors</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">concat</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:li</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">html_safe</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bruins took down Sabres in costly victory]]></title>
    <link href="http://dinhyen.github.io/blog/2013/10/23/bruins-took-down-sabres-in-costly-victory/"/>
    <updated>2013-10-23T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/10/23/bruins-took-down-sabres-in-costly-victory</id>
    <content type="html"><![CDATA[<p>It was game 1 of the World Series.  Yawn. Since our pickup game was canceled in part due to the aforementioned sport&mdash;eh recreational&mdash;event, it was going to be either a work night or an early night.  Fortunately, the Bruins came to the rescue by taking on the Sabres.  It&rsquo;s a good thing it was on NBCSports/Versus instead of NESN, where viewers would have been bombarded with a constant barrage of WS updates, even though the network TV announcers are downright annoying. The Bruins welcome the undefeated Sharks tomorrow at home, but tonight would be a Bear-Buffalo grudge match.</p>

<p>The game was billed as a Wednesday Rivalry Game.  The Bruins&#8217; record was 5-2 and the Sabres 1-8-1, so these were clearly two teams headed in different directions. In fact, it hasn&rsquo;t been much of a rivalry since they last faced each other in the 2nd round of the 2009-10 playoffs.  The Sabres have not made the playoffs in the last two years.  They have the second worst record in the league.  The only other team with a similarly dismal record, the Broadstreet Bumblers, got their coach fired just 3 games into the season.  Nevertheless, the Sabres were one of the few teams with a winning record against the Bruins last season and, like the Canadiens, always seem to find ways to beat the Bruins.</p>

<p>But it wouldn&rsquo;t happen tonight. Just from this game, it was clear why they&rsquo;ve been struggling.  They were terrible in their zone. They got beat to the puck.  They got beat in one-on-one battles. They weren&rsquo;t strong enough on the puck carrier to get it back. On offense, they weren&rsquo;t playing as a team.  Skilled guys tried to make plays by themselves.  Cody Hodgson tried to  take on 4 Bruins defenders on the power play&mdash;that doesn&rsquo;t work even in peewee hockey. Guys were taking themselves off-sides. They were a terribly disorganized team who seemed unfocused and unconfident. And then there was John Scott, a 6&#8217;8, 260-lb monster who looks vaguely like Liev Schreiber.  By NHL standards, he can barely skate (even though he&rsquo;s better than every normal person and probably most minor leaguers).  He&rsquo;s there to intimidate and even terrorize.  Just <a href="http://sports.yahoo.com/blogs/nhl-puck-daddy/john-scott-explains-why-attacked-poor-nearly-defenseless-202830725--nhl.html">ask Phil Kessel</a>.  Admittedly, in hockey, particularly &ldquo;old-time hockey&rdquo;, being intimidating can sometimes have as much of an impact as being skillful.</p>

<p>The lone bright spot for the Sabres had to be Ryan Miller.  The Bruins had odd-man rushes all night.  Despite the lopsided score, it would have been much worse if it weren&rsquo;t for him. He made several outstanding saves that would have gotten by lesser goalies. The most sparkling save was on a tic-tac-toe play that started on one side of the net and ended on the other with with David Krejci catching the puck on his backhand and quickly flipping it with his forehand, only to be robbed by Miller&rsquo;s glove. Of the goals he gave up, three were perfect backdoor plays that he had no chance on. One he would have stopped if his stick hadn&rsquo;t been pushed out of position by a falling teammate.  Only the last one was somewhat saveable, but by then the game was out of reach.</p>

<p>The Bruins&#8217; 5-2 victory was marred by an ugly incident. Long after he had released the puck, Loui Eriksson was blindsided by Scott with a hit to the head that spun him around and knocked him to the ground.  He struggled to get up but stumbled, clearly disoriented. This is a scary hit that was eerily reminiscent of the Matt Cooke hit on Marc Savard that ended Savard&rsquo;s promising career.  Eriksson was woozy and had to be helped off the ice. One can only hope that his long-term health isn&rsquo;t compromised.  He&rsquo;s undoubtedly lost for tomorrow night&rsquo;s game, if not longer.  This type of hits, where the &ldquo;head is the principal area of contact&rdquo;, is something the league has been trying to stamp out.  Already several multi-game suspensions have been handed out this season for similar plays.  It&rsquo;s quite expected that the league will come down hard on Scott.</p>

<p>The Bruins responded with Adam McQuaid tackling Scott and wrestling him down.  Perhaps that was enough.  I&rsquo;m not one to demand that the Bruins respond to a dirty play with dirty plays of their own.  It&rsquo;s important to many hockey fans that the team stand up for their teammates.  After the Savard incident, the Bruins were criticized by some for their lack of response. Maybe Shawn Thornton will take on Scott the next time they meet (provided Scott is playing), but it wouldn&rsquo;t be good for Thornton given that Scott is in a totally different weight class.  Maybe someone will engage Steve Ott, another dirty Sabre (his sucker punch on Krejci went unnoticed by the refs).  I really think a more measured response is to make them pay on the scoreboard.  The Bruins did just that, by scoring a goal on the PP resulting from Scott&rsquo;s major penalty.  If Scott&rsquo;s action was a intended as &ldquo;message-sending&rdquo;, it already failed, because experience has shown that when faced with adversity, this team becomes stronger.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple table sorting with Angular]]></title>
    <link href="http://dinhyen.github.io/blog/2013/09/28/simple-table-sorting-with-angular/"/>
    <updated>2013-09-28T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/09/28/simple-table-sorting-with-angular</id>
    <content type="html"><![CDATA[<p><a href="http://plnkr.co/edit/rynrXkzGcSHeWZrSXENl">View in Plunkr</a></p>

<p>I have a page with tabular data which I want to be able to sort without having to go back to the server. Also a nice-to-have would be the ability to filter the displayed items. Since I&rsquo;m trying to learn Angular, this seems like an excellent opportunity to try it out.</p>

<p>In the controller, the variable items holds the data to be sorted/filtered, while filteredItems is initialized to an empty array. I also specify the initial sort field and direction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">tableSortCtl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$filter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#json&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">filteredItems</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">=</span> <span class="s2">&quot;firstName&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">descending</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data are inserted as a JSON string into the page inside a <code>script</code> tag.  I could have made a separate request to retrieve the data.  But since the data are already available and used elsewhere on the page, I decided to save the extra request.  The JSON string is parsed into an array of objects with the help of jQuery.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;json&quot;</span> <span class="na">type=</span><span class="s">&quot;application/json&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="p">[</span> <span class="p">{</span> <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;firstName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Alice&quot;</span><span class="p">,</span> <span class="s2">&quot;lastName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Krige&quot;</span><span class="p">,</span> <span class="s2">&quot;birthdate&quot;</span> <span class="o">:</span> <span class="s2">&quot;1954-06-28&quot;</span><span class="p">,</span> <span class="s2">&quot;address&quot;</span> <span class="o">:</span> <span class="s2">&quot;123 Main Street&quot;</span><span class="p">,</span> <span class="s2">&quot;phone&quot;</span> <span class="o">:</span> <span class="s2">&quot;111-222-3333&quot;</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;firstName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="s2">&quot;lastName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Probert&quot;</span><span class="p">,</span> <span class="s2">&quot;birthdate&quot;</span> <span class="o">:</span> <span class="s2">&quot;1965-06-05&quot;</span><span class="p">,</span> <span class="s2">&quot;address&quot;</span> <span class="o">:</span> <span class="s2">&quot;23 Elm Street&quot;</span><span class="p">,</span> <span class="s2">&quot;phone&quot;</span> <span class="o">:</span> <span class="s2">&quot;359-324-1494&quot;</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;firstName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Charlie&quot;</span><span class="p">,</span> <span class="s2">&quot;lastName&quot;</span> <span class="o">:</span> <span class="s2">&quot;Darwin&quot;</span><span class="p">,</span> <span class="s2">&quot;birthdate&quot;</span> <span class="o">:</span> <span class="s2">&quot;1809-02-12&quot;</span><span class="p">,</span> <span class="s2">&quot;address&quot;</span> <span class="o">:</span> <span class="s2">&quot;65 Finch Alley&quot;</span><span class="p">,</span> <span class="s2">&quot;phone&quot;</span> <span class="o">:</span> <span class="s2">&quot;782-624-6038&quot;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an excerpt of the markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table table-striped&quot;</span> <span class="na">id=</span><span class="s">&quot;tag-list&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;items.length &gt; 0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th</span> <span class="na">id=</span><span class="s">&quot;firstName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;sort(&#39;firstName&#39;)&quot;</span><span class="nt">&gt;</span>First name <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-sort&quot;</span><span class="nt">&gt;&lt;/i&gt;&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in filteredItems | orderBy:sortField:descending&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span><span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ng-repeat directive specifies that a new table row should be created for each item. With the parameterized orderBy filter, sorting is accomplished simply by assigning a value to the sort field and toggling the sort direction flag.  This is impressively straight-forward and elegant. The rest of the function is DOM-manipulation to display the proper sort arrow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">sort</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newSortField</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">==</span> <span class="nx">newSortField</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">descending</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">descending</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">=</span> <span class="nx">newSortField</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;th i&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-sort&#39;</span><span class="p">);</span>  <span class="c1">// reset sort icon for columns with existing icons</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">descending</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">newSortField</span> <span class="o">+</span> <span class="s1">&#39; i&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-caret-down&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">newSortField</span> <span class="o">+</span> <span class="s1">&#39; i&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-caret-up&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the markup for the text filter.  A change to the value of the textbox triggers the search.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;query&quot;</span> <span class="na">ng-change=</span><span class="s">&quot;search()&quot;</span> <span class="na">class=</span><span class="s">&quot;input-large&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Filter&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The search function simply iterates through all the fields of each item and attempts to find a simple (case-insensitive) match.  This works for numbers and strings but unfortunately not, for example, on the month name for a date field, for which we&rsquo;d have to do some additional processing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">filteredItems</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(</span><span class="s1">&#39;filter&#39;</span><span class="p">)(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">field</span> <span class="k">in</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">item</span><span class="p">[</span><span class="nx">field</span><span class="p">],</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">query</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">match</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldValue</span><span class="p">,</span> <span class="nx">searchTerm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fieldValue</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">searchTerm</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fieldValue</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">searchTerm</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">())</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wix: Executing custom action before starting Windows service]]></title>
    <link href="http://dinhyen.github.io/blog/2013/09/27/wix-executing-custom-action-before-starting-windows-service/"/>
    <updated>2013-09-27T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/09/27/wix-executing-custom-action-before-starting-windows-service</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been trying to get a Wix installer to work. This particular scenario is pretty simple. I want to configure the database via a custom action, then start a Windows service which then queries the database before starting.  This would seem like a commonplace scenario. However, Wix documentations are sparse and I&rsquo;ve been wrangling with this for some time.  I finally found a solution.  While I loathe to reference a StackOverflow answer, as a favor to my future self I&rsquo;m going to do so anyways.</p>

<p>The following defines the component that installs and starts the service and creates a feature that references it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ComponentGroup</span> <span class="na">Id=</span><span class="s">&#39;b_SyncSvcComps&#39;</span> <span class="na">Directory=</span><span class="s">&#39;b_SyncInstallDir&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Component</span> <span class="na">Id=</span><span class="s">&#39;b_SyncSvc&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;File</span> <span class="na">Id=</span><span class="s">&#39;b_SyncExe&#39;</span> <span class="na">Name=</span><span class="s">&#39;MyService.exe&#39;</span> <span class="na">Source=</span><span class="s">&#39;$(var.syncSrcDir)\MyService.exe&#39;</span> <span class="na">DiskId=</span><span class="s">&#39;1&#39;</span> <span class="na">KeyPath=</span><span class="s">&#39;yes&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ServiceInstall</span> <span class="na">Id=</span><span class="s">&#39;b_InstallSyncSvc&#39;</span> <span class="na">Type=</span><span class="s">&#39;ownProcess&#39;</span> <span class="na">Name=</span><span class="s">&#39;MyService&#39;</span> <span class="na">DisplayName=</span><span class="s">&#39;My Service&#39;</span> <span class="na">Description=</span><span class="s">&#39;My Service&#39;</span> <span class="na">Start=</span><span class="s">&#39;auto&#39;</span> <span class="na">Account=</span><span class="s">&#39;[SERVICEACCOUNT]&#39;</span> <span class="na">Password=</span><span class="s">&#39;[SERVICEPASSWORD]&#39;</span> <span class="na">ErrorControl=</span><span class="s">&#39;normal&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ServiceControl</span> <span class="na">Id=</span><span class="s">&#39;b_StartSyncSvc&#39;</span> <span class="na">Start=</span><span class="s">&#39;install&#39;</span> <span class="na">Stop=</span><span class="s">&#39;both&#39;</span> <span class="na">Remove=</span><span class="s">&#39;uninstall&#39;</span> <span class="na">Name=</span><span class="s">&#39;MyService&#39;</span> <span class="na">Wait=</span><span class="s">&#39;yes&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Component&gt;</span>
</span><span class='line'><span class="nt">&lt;/ComponentGroup&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Feature</span> <span class="na">Id=</span><span class="s">&#39;b_ConnectedModeFeature&#39;</span> <span class="na">Title=</span><span class="s">&#39;Connected Mode Features&#39;</span> <span class="na">Level=</span><span class="s">&#39;1&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ComponentGroupRef</span> <span class="na">Id=</span><span class="s">&#39;b_SyncSvcComps&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Feature&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following snippet in Product.wxs actually installs the feature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Feature</span> <span class="na">Id=</span><span class="s">&#39;b_Features&#39;</span> <span class="na">Title=</span><span class="s">&#39;[ProductName]&#39;</span> <span class="na">Level=</span><span class="s">&#39;1&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;FeatureRef</span> <span class="na">Id=</span><span class="s">&#39;b_ConnectedModeFeature&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Feature&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the initial version of the custom action that I want to run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;CustomAction</span> <span class="na">Id=</span><span class="s">&quot;DbBatchCmd&quot;</span> <span class="na">Directory=</span><span class="s">&#39;B_DBINSTALLDIR&#39;</span> <span class="na">Execute=</span><span class="s">&quot;immediate&quot;</span> <span class="na">Impersonate=</span><span class="s">&quot;yes&quot;</span> <span class="na">Return=</span><span class="s">&quot;check&quot;</span> <span class="na">ExeCommand=</span><span class="s">&quot;[SystemFolder]\cmd /c &amp;quot;&amp;quot;setup_database.cmd&amp;quot; &amp;quot;[b_WebServer]&amp;quot; &amp;quot;[b_DbServer]&amp;quot;&amp;quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following snippet in Product.wxs runs the custom action.  Here it is run after InstallFinalize, the last possible step in the installation&rsquo;s sequence of events.  The condition ensures that it is only run if the product isn&rsquo;t already installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;InstallExecuteSequence&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Custom</span> <span class="na">Action=</span><span class="s">&quot;DbBatchCmd&quot;</span> <span class="na">After=</span><span class="s">&quot;InstallFinalize&quot;</span><span class="nt">&gt;</span>NOT Installed<span class="nt">&lt;/Custom&gt;</span>
</span><span class='line'><span class="nt">&lt;/InstallExecuteSequence&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to the above, the installer tries to start the service before it runs the custom action to configure the database.  Of course, since the service requires the database to be set up, it balks.</p>

<p>Among others, I tried running the custom action earlier using the <code>Before="StartServices"</code> and <code>After="InstallFiles"</code> attributes. The latter makes sense because the installer needs to copy files to the file system before it can execute the script.  When inspected with Orca, the MSI has the correct InstallExecuteSequence:</p>

<pre>
...
InstallFiles              4000
DbBatchCmd  NOT Installed 4001
InstallServices VersionNT 5800
StartServices VersionNT   5900
...
InstallFinalize           6600
</pre>


<p>However, the installer never executes the custom action.  It always tries to start the service and almost immediately fails. In fact, the custom action only runs when it&rsquo;s set to <code>After="InstallFinalize"</code> as above.</p>

<p>One of the key things was provided by the helpful if somewhat verbose Windows installer log, which is created when you start the installer as follows:</p>

<pre>
msiexec /i myinstaller.msi /l*v myinstaller.log
</pre>


<p>Someday, Microsoft will have consistent command-line arguments.  The log has this to say about the service:</p>

<pre>
MSI (s) (3C:A8) [17:10:02:607]: Note: 1: 2262 2: Error 3: -2147287038 
Info 1721.There is a problem with this Windows Installer package. A program required for this install to complete could not be run. Contact your support personnel or package vendor. Action: DbBatchCmd, location: C:\inetpub\wwwroot\MyApp\Database\, command: C:\Windows\SysWOW64\\cmd /c ""setup_database.cmd" "my_webserver" "my_dbserver"" 
Action ended 17:10:02: ShipBatchCmd. Return value 1.
</pre>


<p>This is followed by entries for InstallServices and StartServices.  So the installer does try to run the custom action but fails.</p>

<p>The <a href="http://stackoverflow.com/questions/778210/wix-trying-to-figure-out-install-sequences">answer</a> is provided by Rob Mensching, who created Wix.  According to him, <code>After="InstallFiles"</code> is correct. However, the execution needs to be &ldquo;deferred&rdquo; until the files are actually copied to the file system.  Below is the corrected XML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;CustomAction</span> <span class="na">Id=</span><span class="s">&quot;DbBatchCmd&quot;</span> <span class="na">Directory=</span><span class="s">&#39;B_DBINSTALLDIR&#39;</span> <span class="na">Execute=</span><span class="s">&quot;deferred&quot;</span> <span class="na">ExeCommand=</span><span class="s">&quot;[SystemFolder]\cmd /c &amp;quot;&amp;quot;setup_database.cmd&amp;quot; &amp;quot;[b_WebServer]&amp;quot; &amp;quot;[b_DbServer]&amp;quot;&amp;quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;InstallExecuteSequence&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Custom</span> <span class="na">Action=</span><span class="s">&quot;DbBatchCmd&quot;</span> <span class="na">After=</span><span class="s">&quot;InstallFiles&quot;</span><span class="nt">&gt;</span>NOT Installed<span class="nt">&lt;/Custom&gt;</span>
</span><span class='line'><span class="nt">&lt;/InstallExecuteSequence&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wix: Batch files.  Yes, really.]]></title>
    <link href="http://dinhyen.github.io/blog/2013/09/26/wix-batch-file/"/>
    <updated>2013-09-26T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/09/26/wix-batch-file</id>
    <content type="html"><![CDATA[<p>Batch files are the last resort due to its Neanderthal abilities and exasperating syntax.  But if I want to run a bunch of things on bare-boned Windows Server 2003, this seems like the quickest if not only option.</p>

<p>I tried something like this, by creating a property for the system executable cmd.exe, which would execute the batch script via the /c switch. Then I created a custom action that relies on the property.  The batch script and its arguments must be enclosed in quotes. In addition, each argument should be enclosed in quotes in case it contains a space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Property</span> <span class="na">Id=</span><span class="s">&quot;CMD&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;DirectorySearch</span> <span class="na">Id=</span><span class="s">&quot;SysDir&quot;</span> <span class="na">Path=</span><span class="s">&quot;[SystemFolder]&quot;</span> <span class="na">Depth=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FileSearch</span> <span class="na">Id=</span><span class="s">&quot;CmdExe&quot;</span> <span class="na">Name=</span><span class="s">&quot;cmd.exe&quot;</span>  <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/DirectorySearch&gt;</span>
</span><span class='line'><span class="nt">&lt;/Property&gt;</span>
</span><span class='line'><span class="nt">&lt;CustomAction</span> <span class="na">Id=</span><span class="s">&quot;BatchScript&quot;</span> <span class="na">Property=</span><span class="s">&quot;CMD&quot;</span> <span class="na">Execute=</span><span class="s">&quot;immediate&quot;</span> <span class="na">Impersonate=</span><span class="s">&quot;yes&quot;</span> <span class="na">Return=</span><span class="s">&quot;check&quot;</span> <span class="na">ExeCommand=</span><span class="s">&quot;/c &amp;quot;&amp;quot;[INSTALLDIR]\batch_script.cmd&amp;quot; &amp;quot;my arg1&amp;quot; &amp;quot;my arg2&amp;quot;&amp;quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I want to use property values (derived from user inputs) as arguments, the &ldquo;beauty&rdquo; of this (and I say so with a straight face) is simply the replacements of raw argument values with property references.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Property</span> <span class="na">Id=</span><span class="s">&quot;b_arg1&quot;</span><span class="nt">&gt;</span>my arg1<span class="nt">&lt;/Property&gt;</span>
</span><span class='line'><span class="nt">&lt;Property</span> <span class="na">Id=</span><span class="s">&quot;b_arg2&quot;</span><span class="nt">&gt;</span>my arg2<span class="nt">&lt;/Property&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;CustomAction</span> <span class="na">Id=</span><span class="s">&quot;BatchScript&quot;</span> <span class="na">Property=</span><span class="s">&quot;CMD&quot;</span> <span class="na">Execute=</span><span class="s">&quot;immediate&quot;</span> <span class="na">Impersonate=</span><span class="s">&quot;yes&quot;</span> <span class="na">Return=</span><span class="s">&quot;check&quot;</span> <span class="na">ExeCommand=</span><span class="s">&quot;/c &amp;quot;&amp;quot;[B_DBINSTALLDIR]\batch_script.cmd&amp;quot; &amp;quot;[b_arg1]&amp;quot; &amp;quot;[b_arg2]&amp;quot;&amp;quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I hit a snag.  The batch script needs to call other batch scripts in the same directory.  With this approach, I can&rsquo;t set the working directory because <CustomAction> can have either a Directory attribute or a Property attribute but not both.  Here cmd.exe simply runs under the directory it defaults to, <code>c:\windows\system32</code>.</p>

<p>With a slight modification by including the entire command in the ExeCommand attribute, the custom action can use a working directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;CustomAction</span> <span class="na">Id=</span><span class="s">&quot;BatchScript&quot;</span> <span class="na">Directory=</span><span class="s">&#39;INSTALLDIR&#39;</span> <span class="na">Execute=</span><span class="s">&quot;immediate&quot;</span> <span class="na">Impersonate=</span><span class="s">&quot;yes&quot;</span> <span class="na">Return=</span><span class="s">&quot;check&quot;</span> <span class="na">ExeCommand=</span><span class="s">&quot;[SystemFolder]\cmd /c &amp;quot;&amp;quot;batch_script.cmd&amp;quot; &amp;quot;[b_arg1]&amp;quot; &amp;quot;[b_arg2]&amp;quot;&amp;quot;&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the initial version of the batch script.  The database is configured via sqlcmd with the arguments which are passed to the script.</p>

<pre>
set arg1=%1
set arg2=%2
sqlcmd -E -d database_name -i "sql_script.sql" -v arg1="%arg1%" arg2="%arg2%"
</pre>


<p>However, some of the script arguments are already enclosed in quotes, which must be there because they may contain space.  This means the sqlcmd arguments now have extra quotes. I suppose if I made sure all batch file arguments are enclosed in quotes, I wouldn&rsquo;t need the quotes in the sqlcmd parameters list. Nevertheless, I decide to strip the quotes before forwarding the arguments to sqlcmd.</p>

<pre>
set arg1=%arg1:"=%
set arg2=%arg2:"=%
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bruins Training Camp 2013]]></title>
    <link href="http://dinhyen.github.io/blog/2013/09/17/bruins-training-camp-2013/"/>
    <updated>2013-09-17T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/09/17/bruins-training-camp-2013</id>
    <content type="html"><![CDATA[<p>Having moved to the &lsquo;burbs recently, I look forward to attending the Bruins&rsquo; regular-season practice sessions at Ristuccia Arena in Wilmington, now that it&rsquo;s only a few miles away.  The 2013 Training Camp, though, was held at TD Garden the weekend of September 14-15. Of course I was going to be there.</p>

<p>The 2013 season was a bit of a roller coaster ride.  It was thrilling at times, but ultimately disappointing. It was a hard pill to swallow watching the Blackhawks celebrate with the Cup on our ice. Then came the off-season changes.  The departures of Tyler Seguin and Rich Perveley were certainly shocking, particularly Seguin who were expected to be the next Bruins superstar. Then came the arrival of Jarome Iginla, whom most Bruins fans including myself were gleefully cheering against especially during the Penguins series.  Seeing Iginla wearing the spoked B would be a little weird, to say the least.  Even the anticipated free-agency departures of popular Bruins Nathan Horton (to Columbus) and Andrew Ference (to Edmonton) were hard to take. I like Ference in particular, for his leadership qualities and environmental activism.  It didn&rsquo;t help matter that a very solid goalie and likeable player in Anton Khudobin also left, which was a surprise.</p>

<p>Having endured the summer of baseball and the start of football season, I am beyond thrill at the return of hockey.  Judging from the turnout for the training camp, despite the early weekend hours, many Bruins fans were feeling the same way.  Part of the eagerness must come from anticipating the new faces on the roster.  But for the most part, I just wanted to spectate the most exciting team sports invented by man.</p>

<p>The Training Camp consisted of 2 groups.  With 50-odd participants and only a few open roster spots, it was clear that most of the new guys were going to end up elsewhere, whether with the baby Bruins in Providence, their junior/college team or some place like Saskatoon.  Nevertheless, it was a chance for the coaches to evaluate players or for fans like me to familiarize ourselves with our prospects.</p>

<p>I&rsquo;m guessing the opening-day roster will look something like this:</p>

<p>Milan Lucic (17) &ndash; David Krejci (46) &ndash; Jarome Iginla (12)<br/>
Brad Marchand (63) &ndash; Patrice Bergeron (37) &ndash; Loui Eriksson (21)<br/>
Carl Soderberg (34) &ndash; Chris Kelly (23) &ndash; ???<br/>
Daniel Paille (20) &ndash; Gregory Campbell (11) &ndash; Shawn Thornton (22)</p>

<p>Zdeno Chara (33) &ndash; Johnny Boychuk (55)<br/>
Dennis Seidenberg (44) &ndash; Dougie Hamilton (27)<br/>
??? &ndash; Adam McQuaid (54)</p>

<p>Tuukka Rask (40)<br/>
???</p>

<p>On defense, Matt Bartkowski (43) and Torey Krug (47), both left-shots, are likely candidates.  Both played last season, Krug having stood out in the Rangers series.  Local guy David Warsofsky is probably also in consideration.  The empty forward and goalie spots are wide-open. That&rsquo;s why we&rsquo;re here.</p>

<p>Seth Griffith misses an open-net chance on Niklas Svedberg.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1460.jpg' /></p>

<p>Dennis Seidenberg patrols the blue line on his unusual t-blade.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1479.jpg' /></p>

<p>Crowd around Svedberg.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1533.jpg' /></p>

<p>Chris Kelly cirling the net.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1535.jpg' /></p>

<p>New signee Matthew Lindblad trying to get a bead on Tuukka Rask.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1564.jpg' /></p>

<p>Brad Marchand buzzes the net as usual.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1740.jpg' /></p>

<p>Patrice Bergeron looks to be in full form after the serious injuries sustained in the Blackhawks series.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1644.jpg' /></p>

<p>Newcomer Loui Eriksson (21) drives to the net, guarded by Dougie Hamilton (27).</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1614.jpg' /></p>

<p>Another look at Eriksson.  He seemed to be an open-ice player who isn&rsquo;t afraid of going to the crease. He&rsquo;s bigger than Seguin and has good speed. The demise of our team speed with the departures of Seguin and Peverley is greatly exaggerated.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1712.jpg' /></p>

<p>Jordan Caron (38) and Reilly Smith. Caron has been up and down with the big club. Of all the young guys he probably has the most NHL experience. Maybe he can stick around this time.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1680.jpg' /></p>

<p>Chris Casto in full flight.  Hockey players can look like they&rsquo;re sprinting.  Actually, it&rsquo;s not quite true. They&rsquo;re much faster than a sprinter.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1716.jpg' /></p>

<p>Marchand trying to shake off Hamilton.  That&rsquo;s probably not a great gap for Hamilton, but you can&rsquo;t stay too close to Marchand or he&rsquo;ll make you look bad.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1755.jpg' /></p>

<p>Mike Moore finds out the hard way where the goal post is.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1634.jpg' /></p>

<p>Hamilton should probably be between his check and the net instead of chasing him but, meh, it&rsquo;s practice. He&rsquo;s huge, at 6&#8217;5 he&rsquo;s second only to Chara.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1747.jpg' /></p>

<p><a href="http://www.youtube.com/watch?v=h15m87WsCHQ">This gutsy display of sportsmanship and determination</a> after his leg was broken by an Evgeni Malkin slapshot made Gregory Campbell a Bruin forever. This isn&rsquo;t Lionel Messi crying after he got tripped.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2170.jpg' /></p>

<p>Matt Bartkowski sees something wince-worthy. On the right is Carl Soderberg.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1845.jpg' /></p>

<p>Adam McQuaid with a rare smile.  In the background Shawn Thornton juggles the puck on the blade of his stick. The tough guy has mad skillz.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1911.jpg' /></p>

<p>Milan Lucic having a laugh with (or at?) Bartkowski.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1920.jpg' /></p>

<p>I&rsquo;m going with &ldquo;laugh with&rdquo;. Bart is such a jokester.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_1931.jpg' /></p>

<p>Chara having a chat with Nick Johnson (32) and Alexander Fallstrom (59).  Those are not midgets&mdash;both are listed at 6&#8217;2. Chara is just a monster, and I mean that in an admiring way.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2023.jpg' /></p>

<p>He can move too.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2111.jpg' /></p>

<p>New &ldquo;old&rdquo; face Jarome Iginla.  He potted 2 against the Habs two nights after this in a pre-season game in Montreal. Welcome to Boston, Iggy.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2040.jpg' /></p>

<p>Lucic with a wicked snap shot.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2051.jpg' /></p>

<p>The 3rd member of the projected top line and my favorite player.  The bruising line of Lucic-Iginla-Krejci is going to give defensemen nightmares. They have great hands, decent speed, hit like a train and are impossible to contain.  They bring back fond memories of the so-called 700 Pound Line of Joe Thornton, Mike Knuble and Glen Murray.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2123.jpg' /></p>

<p>Torey Krug with Mark Messier&rsquo;s patented snap shot off the wrong leg. Which, by the way, everyone is using these days.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2062.jpg' /></p>

<p>Fallstrom with a good flex of the stick.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2073.jpg' /></p>

<p>A first look at Malcolm Subban.  You know, the brother of Boston&rsquo;s public enemy #1 PK Subban. He did say he never liked his brother anyways. The kid is all right.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2100.jpg' /></p>

<p>Kevan Miller who hails from, get this, Los Angeles.  That&rsquo;s right, a California kid playing pro hockey.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2108.jpg' /></p>

<p>Close-up of Daniel Paille.</p>

<p><img src='https://dl.dropboxusercontent.com/u/52804626/bruins-2013/dsc_2150.jpg' /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with CSS sibling selectors]]></title>
    <link href="http://dinhyen.github.io/blog/2013/08/09/fun-with-css-sibling-selectors/"/>
    <updated>2013-08-09T00:00:00-04:00</updated>
    <id>http://dinhyen.github.io/blog/2013/08/09/fun-with-css-sibling-selectors</id>
    <content type="html"><![CDATA[<p><a href="http://jsfiddle.net/dinhyen/q4FKT/1/">View the live example</a></p>

<p>It seems like I&rsquo;m always <a href="http://dinhyen.github.io/blog/2013/07/02/search-box-using-knockoutjs/" title="Search box using KnockoutJS">working on search boxes</a>, but here goes another. My goal here is to display an icon inside the search box. Initially, the search box has a dark background. When clicked, the background changes to white. The icon should changes its color based on whether or not the search box has focus. If we were using a font-based icon such as <a href="http://fortawesome.github.io/Font-Awesome/">Fontawesome</a>, which is awesome by the way, styling the icon would be a simple exercise.  However, we&rsquo;re using an image-based icon, so it&rsquo;s not possible to change its color.</p>

<p>One solution is to use 2 icons, dark and light. We swap them depending on whether the input has focus. If the input is inactive, we show the light icon and hide the dark icon.  If the input is focused, we do the opposite.</p>

<p>To access the icon in the context of the input, we use the CSS sibling selector <code>~</code>. Unlike the other CSS sibling selector, <code>+</code>, the <code>~</code> selector doesn&rsquo;t require that the second element be immediately adjacent to the first.  This is important since we have 2 icons, the second of which wouldn&rsquo;t be adjacent to the input.  We also use the <code>not()</code> selector to select the element that lacks the specified class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.navbar-search-wrapper</span> <span class="nt">input</span> <span class="o">~</span> <span class="nc">.icon-search.icon-white</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.navbar-search-wrapper</span> <span class="nt">input</span><span class="nd">:focus</span> <span class="o">~</span> <span class="nc">.icon-search.icon-white</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.navbar-search-wrapper</span> <span class="nt">input</span> <span class="o">~</span> <span class="nc">.icon-search</span><span class="nd">:not</span><span class="o">(</span><span class="nc">.icon-white</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.navbar-search-wrapper</span> <span class="nt">input</span><span class="nd">:focus</span> <span class="o">~</span> <span class="nc">.icon-search</span><span class="nd">:not</span><span class="o">(</span><span class="nc">.icon-white</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
